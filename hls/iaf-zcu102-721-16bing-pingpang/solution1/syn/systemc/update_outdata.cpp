// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "update_outdata.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic update_outdata::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic update_outdata::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> update_outdata::ap_ST_fsm_pp0_stage0 = "1";
const bool update_outdata::ap_const_boolean_1 = true;
const sc_lv<32> update_outdata::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool update_outdata::ap_const_boolean_0 = false;
const sc_lv<1> update_outdata::ap_const_lv1_0 = "0";
const sc_lv<3> update_outdata::ap_const_lv3_0 = "000";
const sc_lv<2> update_outdata::ap_const_lv2_0 = "00";
const sc_lv<4> update_outdata::ap_const_lv4_0 = "0000";
const sc_lv<32> update_outdata::ap_const_lv32_1 = "1";
const sc_lv<128> update_outdata::ap_const_lv128_lc_2 = "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<32> update_outdata::ap_const_lv32_20 = "100000";
const sc_lv<32> update_outdata::ap_const_lv32_3F = "111111";
const sc_lv<32> update_outdata::ap_const_lv32_40 = "1000000";
const sc_lv<32> update_outdata::ap_const_lv32_5F = "1011111";
const sc_lv<32> update_outdata::ap_const_lv32_60 = "1100000";
const sc_lv<32> update_outdata::ap_const_lv32_7F = "1111111";
const sc_lv<32> update_outdata::ap_const_lv32_80 = "10000000";
const sc_lv<32> update_outdata::ap_const_lv32_9F = "10011111";
const sc_lv<32> update_outdata::ap_const_lv32_A0 = "10100000";
const sc_lv<32> update_outdata::ap_const_lv32_BF = "10111111";
const sc_lv<32> update_outdata::ap_const_lv32_C0 = "11000000";
const sc_lv<32> update_outdata::ap_const_lv32_DF = "11011111";
const sc_lv<32> update_outdata::ap_const_lv32_E0 = "11100000";
const sc_lv<32> update_outdata::ap_const_lv32_FF = "11111111";

update_outdata::update_outdata(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_input01_V_BVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_input01_V_BVALID );
    sensitive << ( ap_sig_ioackin_m_axi_input01_V_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_input01_V_WREADY );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_input01_V_BVALID );
    sensitive << ( ap_sig_ioackin_m_axi_input01_V_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_input01_V_WREADY );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);
    sensitive << ( m_axi_input01_V_BVALID );

    SC_METHOD(thread_ap_condition_575);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_idle_pp0_0to6);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to6 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_input01_V_AWREADY);
    sensitive << ( m_axi_input01_V_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_input01_V_WREADY);
    sensitive << ( m_axi_input01_V_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_WREADY );

    SC_METHOD(thread_input01_V_blk_n_AW);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( m_axi_input01_V_AWREADY );

    SC_METHOD(thread_input01_V_blk_n_B);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_input01_V_BVALID );

    SC_METHOD(thread_input01_V_blk_n_W);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( m_axi_input01_V_WREADY );

    SC_METHOD(thread_m_axi_input01_V_ARADDR);

    SC_METHOD(thread_m_axi_input01_V_ARBURST);

    SC_METHOD(thread_m_axi_input01_V_ARCACHE);

    SC_METHOD(thread_m_axi_input01_V_ARID);

    SC_METHOD(thread_m_axi_input01_V_ARLEN);

    SC_METHOD(thread_m_axi_input01_V_ARLOCK);

    SC_METHOD(thread_m_axi_input01_V_ARPROT);

    SC_METHOD(thread_m_axi_input01_V_ARQOS);

    SC_METHOD(thread_m_axi_input01_V_ARREGION);

    SC_METHOD(thread_m_axi_input01_V_ARSIZE);

    SC_METHOD(thread_m_axi_input01_V_ARUSER);

    SC_METHOD(thread_m_axi_input01_V_ARVALID);

    SC_METHOD(thread_m_axi_input01_V_AWADDR);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( sum_cast_fu_444_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_AWREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_input01_V_AWBURST);

    SC_METHOD(thread_m_axi_input01_V_AWCACHE);

    SC_METHOD(thread_m_axi_input01_V_AWID);

    SC_METHOD(thread_m_axi_input01_V_AWLEN);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_AWREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_input01_V_AWLOCK);

    SC_METHOD(thread_m_axi_input01_V_AWPROT);

    SC_METHOD(thread_m_axi_input01_V_AWQOS);

    SC_METHOD(thread_m_axi_input01_V_AWREGION);

    SC_METHOD(thread_m_axi_input01_V_AWSIZE);

    SC_METHOD(thread_m_axi_input01_V_AWUSER);

    SC_METHOD(thread_m_axi_input01_V_AWVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_AWREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_input01_V_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_m_axi_input01_V_RREADY);

    SC_METHOD(thread_m_axi_input01_V_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_reg_491_pp0_iter1_reg );
    sensitive << ( tmp_1_reg_496_pp0_iter1_reg );
    sensitive << ( tmp_2_reg_501_pp0_iter1_reg );
    sensitive << ( tmp_3_reg_506_pp0_iter1_reg );
    sensitive << ( tmp_6_reg_516_pp0_iter1_reg );
    sensitive << ( tmp_7_reg_521_pp0_iter1_reg );
    sensitive << ( tmp_8_reg_526_pp0_iter1_reg );
    sensitive << ( tmp_9_reg_531_pp0_iter1_reg );
    sensitive << ( tmp_s_reg_536_pp0_iter1_reg );
    sensitive << ( tmp_5_reg_541_pp0_iter1_reg );
    sensitive << ( tmp_10_reg_546_pp0_iter1_reg );
    sensitive << ( tmp_11_reg_551_pp0_iter1_reg );
    sensitive << ( tmp_12_reg_556_pp0_iter1_reg );
    sensitive << ( tmp_13_reg_561_pp0_iter1_reg );
    sensitive << ( tmp_14_reg_566_pp0_iter1_reg );
    sensitive << ( tmp_15_reg_571_pp0_iter1_reg );
    sensitive << ( tmp_16_reg_576_pp0_iter1_reg );
    sensitive << ( tmp_17_reg_581_pp0_iter1_reg );
    sensitive << ( tmp_18_reg_586_pp0_iter1_reg );
    sensitive << ( tmp_19_reg_591_pp0_iter1_reg );
    sensitive << ( tmp_20_reg_596_pp0_iter1_reg );
    sensitive << ( tmp_21_reg_601_pp0_iter1_reg );
    sensitive << ( tmp_22_reg_606_pp0_iter1_reg );
    sensitive << ( tmp_23_reg_611_pp0_iter1_reg );
    sensitive << ( tmp_24_reg_616_pp0_iter1_reg );
    sensitive << ( tmp_25_reg_621_pp0_iter1_reg );
    sensitive << ( tmp_26_reg_626_pp0_iter1_reg );
    sensitive << ( tmp_27_reg_631_pp0_iter1_reg );
    sensitive << ( tmp_28_reg_636_pp0_iter1_reg );
    sensitive << ( tmp_29_reg_641_pp0_iter1_reg );
    sensitive << ( tmp_30_reg_646_pp0_iter1_reg );
    sensitive << ( tmp_31_reg_651_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_WREADY );

    SC_METHOD(thread_m_axi_input01_V_WID);

    SC_METHOD(thread_m_axi_input01_V_WLAST);

    SC_METHOD(thread_m_axi_input01_V_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_WREADY );

    SC_METHOD(thread_m_axi_input01_V_WUSER);

    SC_METHOD(thread_m_axi_input01_V_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_input01_V_WREADY );

    SC_METHOD(thread_sext_cast_fu_154_p1);
    sensitive << ( input01_V_offset );

    SC_METHOD(thread_sum_cast_fu_444_p1);
    sensitive << ( sum_reg_511 );

    SC_METHOD(thread_sum_fu_158_p2);
    sensitive << ( sext_cast_fu_154_p1 );
    sensitive << ( tmp_5_cast_fu_150_p1 );

    SC_METHOD(thread_tmp_1_fu_134_p1);
    sensitive << ( i_syn_in_rr_read );

    SC_METHOD(thread_tmp_2_fu_138_p1);
    sensitive << ( r_ref_r_read );

    SC_METHOD(thread_tmp_3_fu_142_p1);
    sensitive << ( V_m_r_read );

    SC_METHOD(thread_tmp_4_fu_146_p1);
    sensitive << ( num );

    SC_METHOD(thread_tmp_5_cast_fu_150_p1);
    sensitive << ( tmp_4_fu_146_p1 );

    SC_METHOD(thread_tmp_fu_130_p1);
    sensitive << ( i_syn_ex_rr_read );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_input01_V_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_input01_V_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "update_outdata_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_input01_V_AWVALID, "(port)m_axi_input01_V_AWVALID");
    sc_trace(mVcdFile, m_axi_input01_V_AWREADY, "(port)m_axi_input01_V_AWREADY");
    sc_trace(mVcdFile, m_axi_input01_V_AWADDR, "(port)m_axi_input01_V_AWADDR");
    sc_trace(mVcdFile, m_axi_input01_V_AWID, "(port)m_axi_input01_V_AWID");
    sc_trace(mVcdFile, m_axi_input01_V_AWLEN, "(port)m_axi_input01_V_AWLEN");
    sc_trace(mVcdFile, m_axi_input01_V_AWSIZE, "(port)m_axi_input01_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_input01_V_AWBURST, "(port)m_axi_input01_V_AWBURST");
    sc_trace(mVcdFile, m_axi_input01_V_AWLOCK, "(port)m_axi_input01_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_input01_V_AWCACHE, "(port)m_axi_input01_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_input01_V_AWPROT, "(port)m_axi_input01_V_AWPROT");
    sc_trace(mVcdFile, m_axi_input01_V_AWQOS, "(port)m_axi_input01_V_AWQOS");
    sc_trace(mVcdFile, m_axi_input01_V_AWREGION, "(port)m_axi_input01_V_AWREGION");
    sc_trace(mVcdFile, m_axi_input01_V_AWUSER, "(port)m_axi_input01_V_AWUSER");
    sc_trace(mVcdFile, m_axi_input01_V_WVALID, "(port)m_axi_input01_V_WVALID");
    sc_trace(mVcdFile, m_axi_input01_V_WREADY, "(port)m_axi_input01_V_WREADY");
    sc_trace(mVcdFile, m_axi_input01_V_WDATA, "(port)m_axi_input01_V_WDATA");
    sc_trace(mVcdFile, m_axi_input01_V_WSTRB, "(port)m_axi_input01_V_WSTRB");
    sc_trace(mVcdFile, m_axi_input01_V_WLAST, "(port)m_axi_input01_V_WLAST");
    sc_trace(mVcdFile, m_axi_input01_V_WID, "(port)m_axi_input01_V_WID");
    sc_trace(mVcdFile, m_axi_input01_V_WUSER, "(port)m_axi_input01_V_WUSER");
    sc_trace(mVcdFile, m_axi_input01_V_ARVALID, "(port)m_axi_input01_V_ARVALID");
    sc_trace(mVcdFile, m_axi_input01_V_ARREADY, "(port)m_axi_input01_V_ARREADY");
    sc_trace(mVcdFile, m_axi_input01_V_ARADDR, "(port)m_axi_input01_V_ARADDR");
    sc_trace(mVcdFile, m_axi_input01_V_ARID, "(port)m_axi_input01_V_ARID");
    sc_trace(mVcdFile, m_axi_input01_V_ARLEN, "(port)m_axi_input01_V_ARLEN");
    sc_trace(mVcdFile, m_axi_input01_V_ARSIZE, "(port)m_axi_input01_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_input01_V_ARBURST, "(port)m_axi_input01_V_ARBURST");
    sc_trace(mVcdFile, m_axi_input01_V_ARLOCK, "(port)m_axi_input01_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_input01_V_ARCACHE, "(port)m_axi_input01_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_input01_V_ARPROT, "(port)m_axi_input01_V_ARPROT");
    sc_trace(mVcdFile, m_axi_input01_V_ARQOS, "(port)m_axi_input01_V_ARQOS");
    sc_trace(mVcdFile, m_axi_input01_V_ARREGION, "(port)m_axi_input01_V_ARREGION");
    sc_trace(mVcdFile, m_axi_input01_V_ARUSER, "(port)m_axi_input01_V_ARUSER");
    sc_trace(mVcdFile, m_axi_input01_V_RVALID, "(port)m_axi_input01_V_RVALID");
    sc_trace(mVcdFile, m_axi_input01_V_RREADY, "(port)m_axi_input01_V_RREADY");
    sc_trace(mVcdFile, m_axi_input01_V_RDATA, "(port)m_axi_input01_V_RDATA");
    sc_trace(mVcdFile, m_axi_input01_V_RLAST, "(port)m_axi_input01_V_RLAST");
    sc_trace(mVcdFile, m_axi_input01_V_RID, "(port)m_axi_input01_V_RID");
    sc_trace(mVcdFile, m_axi_input01_V_RUSER, "(port)m_axi_input01_V_RUSER");
    sc_trace(mVcdFile, m_axi_input01_V_RRESP, "(port)m_axi_input01_V_RRESP");
    sc_trace(mVcdFile, m_axi_input01_V_BVALID, "(port)m_axi_input01_V_BVALID");
    sc_trace(mVcdFile, m_axi_input01_V_BREADY, "(port)m_axi_input01_V_BREADY");
    sc_trace(mVcdFile, m_axi_input01_V_BRESP, "(port)m_axi_input01_V_BRESP");
    sc_trace(mVcdFile, m_axi_input01_V_BID, "(port)m_axi_input01_V_BID");
    sc_trace(mVcdFile, m_axi_input01_V_BUSER, "(port)m_axi_input01_V_BUSER");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, num, "(port)num");
    sc_trace(mVcdFile, V_m_r_read, "(port)V_m_r_read");
    sc_trace(mVcdFile, i_syn_ex_rr_read, "(port)i_syn_ex_rr_read");
    sc_trace(mVcdFile, i_syn_in_rr_read, "(port)i_syn_in_rr_read");
    sc_trace(mVcdFile, r_ref_r_read, "(port)r_ref_r_read");
    sc_trace(mVcdFile, input01_V_offset, "(port)input01_V_offset");
    sc_trace(mVcdFile, input01_V_blk_n_AW, "(port)input01_V_blk_n_AW");
    sc_trace(mVcdFile, input01_V_blk_n_W, "(port)input01_V_blk_n_W");
    sc_trace(mVcdFile, input01_V_blk_n_B, "(port)input01_V_blk_n_B");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_input01_V_AWREADY, "ap_sig_ioackin_m_axi_input01_V_AWREADY");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_input01_V_WREADY, "ap_sig_ioackin_m_axi_input01_V_WREADY");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_fu_130_p1, "tmp_fu_130_p1");
    sc_trace(mVcdFile, tmp_reg_491, "tmp_reg_491");
    sc_trace(mVcdFile, tmp_reg_491_pp0_iter1_reg, "tmp_reg_491_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_1_fu_134_p1, "tmp_1_fu_134_p1");
    sc_trace(mVcdFile, tmp_1_reg_496, "tmp_1_reg_496");
    sc_trace(mVcdFile, tmp_1_reg_496_pp0_iter1_reg, "tmp_1_reg_496_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_2_fu_138_p1, "tmp_2_fu_138_p1");
    sc_trace(mVcdFile, tmp_2_reg_501, "tmp_2_reg_501");
    sc_trace(mVcdFile, tmp_2_reg_501_pp0_iter1_reg, "tmp_2_reg_501_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_3_fu_142_p1, "tmp_3_fu_142_p1");
    sc_trace(mVcdFile, tmp_3_reg_506, "tmp_3_reg_506");
    sc_trace(mVcdFile, tmp_3_reg_506_pp0_iter1_reg, "tmp_3_reg_506_pp0_iter1_reg");
    sc_trace(mVcdFile, sum_fu_158_p2, "sum_fu_158_p2");
    sc_trace(mVcdFile, sum_reg_511, "sum_reg_511");
    sc_trace(mVcdFile, tmp_6_reg_516, "tmp_6_reg_516");
    sc_trace(mVcdFile, tmp_6_reg_516_pp0_iter1_reg, "tmp_6_reg_516_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_7_reg_521, "tmp_7_reg_521");
    sc_trace(mVcdFile, tmp_7_reg_521_pp0_iter1_reg, "tmp_7_reg_521_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_8_reg_526, "tmp_8_reg_526");
    sc_trace(mVcdFile, tmp_8_reg_526_pp0_iter1_reg, "tmp_8_reg_526_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_9_reg_531, "tmp_9_reg_531");
    sc_trace(mVcdFile, tmp_9_reg_531_pp0_iter1_reg, "tmp_9_reg_531_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_s_reg_536, "tmp_s_reg_536");
    sc_trace(mVcdFile, tmp_s_reg_536_pp0_iter1_reg, "tmp_s_reg_536_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_5_reg_541, "tmp_5_reg_541");
    sc_trace(mVcdFile, tmp_5_reg_541_pp0_iter1_reg, "tmp_5_reg_541_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_10_reg_546, "tmp_10_reg_546");
    sc_trace(mVcdFile, tmp_10_reg_546_pp0_iter1_reg, "tmp_10_reg_546_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_11_reg_551, "tmp_11_reg_551");
    sc_trace(mVcdFile, tmp_11_reg_551_pp0_iter1_reg, "tmp_11_reg_551_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_12_reg_556, "tmp_12_reg_556");
    sc_trace(mVcdFile, tmp_12_reg_556_pp0_iter1_reg, "tmp_12_reg_556_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_13_reg_561, "tmp_13_reg_561");
    sc_trace(mVcdFile, tmp_13_reg_561_pp0_iter1_reg, "tmp_13_reg_561_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_14_reg_566, "tmp_14_reg_566");
    sc_trace(mVcdFile, tmp_14_reg_566_pp0_iter1_reg, "tmp_14_reg_566_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_15_reg_571, "tmp_15_reg_571");
    sc_trace(mVcdFile, tmp_15_reg_571_pp0_iter1_reg, "tmp_15_reg_571_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_16_reg_576, "tmp_16_reg_576");
    sc_trace(mVcdFile, tmp_16_reg_576_pp0_iter1_reg, "tmp_16_reg_576_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_17_reg_581, "tmp_17_reg_581");
    sc_trace(mVcdFile, tmp_17_reg_581_pp0_iter1_reg, "tmp_17_reg_581_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_18_reg_586, "tmp_18_reg_586");
    sc_trace(mVcdFile, tmp_18_reg_586_pp0_iter1_reg, "tmp_18_reg_586_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_19_reg_591, "tmp_19_reg_591");
    sc_trace(mVcdFile, tmp_19_reg_591_pp0_iter1_reg, "tmp_19_reg_591_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_20_reg_596, "tmp_20_reg_596");
    sc_trace(mVcdFile, tmp_20_reg_596_pp0_iter1_reg, "tmp_20_reg_596_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_21_reg_601, "tmp_21_reg_601");
    sc_trace(mVcdFile, tmp_21_reg_601_pp0_iter1_reg, "tmp_21_reg_601_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_22_reg_606, "tmp_22_reg_606");
    sc_trace(mVcdFile, tmp_22_reg_606_pp0_iter1_reg, "tmp_22_reg_606_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_23_reg_611, "tmp_23_reg_611");
    sc_trace(mVcdFile, tmp_23_reg_611_pp0_iter1_reg, "tmp_23_reg_611_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_24_reg_616, "tmp_24_reg_616");
    sc_trace(mVcdFile, tmp_24_reg_616_pp0_iter1_reg, "tmp_24_reg_616_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_25_reg_621, "tmp_25_reg_621");
    sc_trace(mVcdFile, tmp_25_reg_621_pp0_iter1_reg, "tmp_25_reg_621_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_26_reg_626, "tmp_26_reg_626");
    sc_trace(mVcdFile, tmp_26_reg_626_pp0_iter1_reg, "tmp_26_reg_626_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_27_reg_631, "tmp_27_reg_631");
    sc_trace(mVcdFile, tmp_27_reg_631_pp0_iter1_reg, "tmp_27_reg_631_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_28_reg_636, "tmp_28_reg_636");
    sc_trace(mVcdFile, tmp_28_reg_636_pp0_iter1_reg, "tmp_28_reg_636_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_29_reg_641, "tmp_29_reg_641");
    sc_trace(mVcdFile, tmp_29_reg_641_pp0_iter1_reg, "tmp_29_reg_641_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_30_reg_646, "tmp_30_reg_646");
    sc_trace(mVcdFile, tmp_30_reg_646_pp0_iter1_reg, "tmp_30_reg_646_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_31_reg_651, "tmp_31_reg_651");
    sc_trace(mVcdFile, tmp_31_reg_651_pp0_iter1_reg, "tmp_31_reg_651_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, sum_cast_fu_444_p1, "sum_cast_fu_444_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_input01_V_AWREADY, "ap_reg_ioackin_m_axi_input01_V_AWREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_input01_V_WREADY, "ap_reg_ioackin_m_axi_input01_V_WREADY");
    sc_trace(mVcdFile, tmp_4_fu_146_p1, "tmp_4_fu_146_p1");
    sc_trace(mVcdFile, sext_cast_fu_154_p1, "sext_cast_fu_154_p1");
    sc_trace(mVcdFile, tmp_5_cast_fu_150_p1, "tmp_5_cast_fu_150_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to6, "ap_idle_pp0_0to6");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_575, "ap_condition_575");
#endif

    }
}

update_outdata::~update_outdata() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void update_outdata::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_575.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_input01_V_AWREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_input01_V_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_input01_V_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_input01_V_WREADY.read()))) {
                ap_reg_ioackin_m_axi_input01_V_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sum_reg_511 = sum_fu_158_p2.read();
        tmp_10_reg_546 = r_ref_r_read.read().range(95, 64);
        tmp_10_reg_546_pp0_iter1_reg = tmp_10_reg_546.read();
        tmp_11_reg_551 = V_m_r_read.read().range(95, 64);
        tmp_11_reg_551_pp0_iter1_reg = tmp_11_reg_551.read();
        tmp_12_reg_556 = i_syn_ex_rr_read.read().range(127, 96);
        tmp_12_reg_556_pp0_iter1_reg = tmp_12_reg_556.read();
        tmp_13_reg_561 = i_syn_in_rr_read.read().range(127, 96);
        tmp_13_reg_561_pp0_iter1_reg = tmp_13_reg_561.read();
        tmp_14_reg_566 = r_ref_r_read.read().range(127, 96);
        tmp_14_reg_566_pp0_iter1_reg = tmp_14_reg_566.read();
        tmp_15_reg_571 = V_m_r_read.read().range(127, 96);
        tmp_15_reg_571_pp0_iter1_reg = tmp_15_reg_571.read();
        tmp_16_reg_576 = i_syn_ex_rr_read.read().range(159, 128);
        tmp_16_reg_576_pp0_iter1_reg = tmp_16_reg_576.read();
        tmp_17_reg_581 = i_syn_in_rr_read.read().range(159, 128);
        tmp_17_reg_581_pp0_iter1_reg = tmp_17_reg_581.read();
        tmp_18_reg_586 = r_ref_r_read.read().range(159, 128);
        tmp_18_reg_586_pp0_iter1_reg = tmp_18_reg_586.read();
        tmp_19_reg_591 = V_m_r_read.read().range(159, 128);
        tmp_19_reg_591_pp0_iter1_reg = tmp_19_reg_591.read();
        tmp_1_reg_496 = tmp_1_fu_134_p1.read();
        tmp_1_reg_496_pp0_iter1_reg = tmp_1_reg_496.read();
        tmp_20_reg_596 = i_syn_ex_rr_read.read().range(191, 160);
        tmp_20_reg_596_pp0_iter1_reg = tmp_20_reg_596.read();
        tmp_21_reg_601 = i_syn_in_rr_read.read().range(191, 160);
        tmp_21_reg_601_pp0_iter1_reg = tmp_21_reg_601.read();
        tmp_22_reg_606 = r_ref_r_read.read().range(191, 160);
        tmp_22_reg_606_pp0_iter1_reg = tmp_22_reg_606.read();
        tmp_23_reg_611 = V_m_r_read.read().range(191, 160);
        tmp_23_reg_611_pp0_iter1_reg = tmp_23_reg_611.read();
        tmp_24_reg_616 = i_syn_ex_rr_read.read().range(223, 192);
        tmp_24_reg_616_pp0_iter1_reg = tmp_24_reg_616.read();
        tmp_25_reg_621 = i_syn_in_rr_read.read().range(223, 192);
        tmp_25_reg_621_pp0_iter1_reg = tmp_25_reg_621.read();
        tmp_26_reg_626 = r_ref_r_read.read().range(223, 192);
        tmp_26_reg_626_pp0_iter1_reg = tmp_26_reg_626.read();
        tmp_27_reg_631 = V_m_r_read.read().range(223, 192);
        tmp_27_reg_631_pp0_iter1_reg = tmp_27_reg_631.read();
        tmp_28_reg_636 = i_syn_ex_rr_read.read().range(255, 224);
        tmp_28_reg_636_pp0_iter1_reg = tmp_28_reg_636.read();
        tmp_29_reg_641 = i_syn_in_rr_read.read().range(255, 224);
        tmp_29_reg_641_pp0_iter1_reg = tmp_29_reg_641.read();
        tmp_2_reg_501 = tmp_2_fu_138_p1.read();
        tmp_2_reg_501_pp0_iter1_reg = tmp_2_reg_501.read();
        tmp_30_reg_646 = r_ref_r_read.read().range(255, 224);
        tmp_30_reg_646_pp0_iter1_reg = tmp_30_reg_646.read();
        tmp_31_reg_651 = V_m_r_read.read().range(255, 224);
        tmp_31_reg_651_pp0_iter1_reg = tmp_31_reg_651.read();
        tmp_3_reg_506 = tmp_3_fu_142_p1.read();
        tmp_3_reg_506_pp0_iter1_reg = tmp_3_reg_506.read();
        tmp_5_reg_541 = i_syn_in_rr_read.read().range(95, 64);
        tmp_5_reg_541_pp0_iter1_reg = tmp_5_reg_541.read();
        tmp_6_reg_516 = i_syn_ex_rr_read.read().range(63, 32);
        tmp_6_reg_516_pp0_iter1_reg = tmp_6_reg_516.read();
        tmp_7_reg_521 = i_syn_in_rr_read.read().range(63, 32);
        tmp_7_reg_521_pp0_iter1_reg = tmp_7_reg_521.read();
        tmp_8_reg_526 = r_ref_r_read.read().range(63, 32);
        tmp_8_reg_526_pp0_iter1_reg = tmp_8_reg_526.read();
        tmp_9_reg_531 = V_m_r_read.read().range(63, 32);
        tmp_9_reg_531_pp0_iter1_reg = tmp_9_reg_531.read();
        tmp_reg_491 = tmp_fu_130_p1.read();
        tmp_reg_491_pp0_iter1_reg = tmp_reg_491.read();
        tmp_s_reg_536 = i_syn_ex_rr_read.read().range(95, 64);
        tmp_s_reg_536_pp0_iter1_reg = tmp_s_reg_536.read();
    }
}

void update_outdata::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void update_outdata::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void update_outdata::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_input01_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void update_outdata::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_input01_V_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_input01_V_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_input01_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void update_outdata::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_input01_V_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_input01_V_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_input01_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void update_outdata::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0);
}

void update_outdata::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void update_outdata::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void update_outdata::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void update_outdata::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void update_outdata::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void update_outdata::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void update_outdata::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = esl_seteq<1,1,1>(ap_const_logic_0, m_axi_input01_V_BVALID.read());
}

void update_outdata::thread_ap_condition_575() {
    ap_condition_575 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1));
}

void update_outdata::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void update_outdata::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void update_outdata::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void update_outdata::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void update_outdata::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void update_outdata::thread_ap_idle_pp0_0to6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()))) {
        ap_idle_pp0_0to6 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to6 = ap_const_logic_0;
    }
}

void update_outdata::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void update_outdata::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to6.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void update_outdata::thread_ap_sig_ioackin_m_axi_input01_V_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input01_V_AWREADY.read())) {
        ap_sig_ioackin_m_axi_input01_V_AWREADY = m_axi_input01_V_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_1;
    }
}

void update_outdata::thread_ap_sig_ioackin_m_axi_input01_V_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input01_V_WREADY.read())) {
        ap_sig_ioackin_m_axi_input01_V_WREADY = m_axi_input01_V_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_input01_V_WREADY = ap_const_logic_1;
    }
}

void update_outdata::thread_input01_V_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        input01_V_blk_n_AW = m_axi_input01_V_AWREADY.read();
    } else {
        input01_V_blk_n_AW = ap_const_logic_1;
    }
}

void update_outdata::thread_input01_V_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()))) {
        input01_V_blk_n_B = m_axi_input01_V_BVALID.read();
    } else {
        input01_V_blk_n_B = ap_const_logic_1;
    }
}

void update_outdata::thread_input01_V_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        input01_V_blk_n_W = m_axi_input01_V_WREADY.read();
    } else {
        input01_V_blk_n_W = ap_const_logic_1;
    }
}

void update_outdata::thread_m_axi_input01_V_ARADDR() {
    m_axi_input01_V_ARADDR = ap_const_lv32_0;
}

void update_outdata::thread_m_axi_input01_V_ARBURST() {
    m_axi_input01_V_ARBURST = ap_const_lv2_0;
}

void update_outdata::thread_m_axi_input01_V_ARCACHE() {
    m_axi_input01_V_ARCACHE = ap_const_lv4_0;
}

void update_outdata::thread_m_axi_input01_V_ARID() {
    m_axi_input01_V_ARID = ap_const_lv1_0;
}

void update_outdata::thread_m_axi_input01_V_ARLEN() {
    m_axi_input01_V_ARLEN = ap_const_lv32_0;
}

void update_outdata::thread_m_axi_input01_V_ARLOCK() {
    m_axi_input01_V_ARLOCK = ap_const_lv2_0;
}

void update_outdata::thread_m_axi_input01_V_ARPROT() {
    m_axi_input01_V_ARPROT = ap_const_lv3_0;
}

void update_outdata::thread_m_axi_input01_V_ARQOS() {
    m_axi_input01_V_ARQOS = ap_const_lv4_0;
}

void update_outdata::thread_m_axi_input01_V_ARREGION() {
    m_axi_input01_V_ARREGION = ap_const_lv4_0;
}

void update_outdata::thread_m_axi_input01_V_ARSIZE() {
    m_axi_input01_V_ARSIZE = ap_const_lv3_0;
}

void update_outdata::thread_m_axi_input01_V_ARUSER() {
    m_axi_input01_V_ARUSER = ap_const_lv1_0;
}

void update_outdata::thread_m_axi_input01_V_ARVALID() {
    m_axi_input01_V_ARVALID = ap_const_logic_0;
}

void update_outdata::thread_m_axi_input01_V_AWADDR() {
    m_axi_input01_V_AWADDR =  (sc_lv<32>) (sum_cast_fu_444_p1.read());
}

void update_outdata::thread_m_axi_input01_V_AWBURST() {
    m_axi_input01_V_AWBURST = ap_const_lv2_0;
}

void update_outdata::thread_m_axi_input01_V_AWCACHE() {
    m_axi_input01_V_AWCACHE = ap_const_lv4_0;
}

void update_outdata::thread_m_axi_input01_V_AWID() {
    m_axi_input01_V_AWID = ap_const_lv1_0;
}

void update_outdata::thread_m_axi_input01_V_AWLEN() {
    m_axi_input01_V_AWLEN = ap_const_lv32_1;
}

void update_outdata::thread_m_axi_input01_V_AWLOCK() {
    m_axi_input01_V_AWLOCK = ap_const_lv2_0;
}

void update_outdata::thread_m_axi_input01_V_AWPROT() {
    m_axi_input01_V_AWPROT = ap_const_lv3_0;
}

void update_outdata::thread_m_axi_input01_V_AWQOS() {
    m_axi_input01_V_AWQOS = ap_const_lv4_0;
}

void update_outdata::thread_m_axi_input01_V_AWREGION() {
    m_axi_input01_V_AWREGION = ap_const_lv4_0;
}

void update_outdata::thread_m_axi_input01_V_AWSIZE() {
    m_axi_input01_V_AWSIZE = ap_const_lv3_0;
}

void update_outdata::thread_m_axi_input01_V_AWUSER() {
    m_axi_input01_V_AWUSER = ap_const_lv1_0;
}

void update_outdata::thread_m_axi_input01_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input01_V_AWREADY.read()))) {
        m_axi_input01_V_AWVALID = ap_const_logic_1;
    } else {
        m_axi_input01_V_AWVALID = ap_const_logic_0;
    }
}

void update_outdata::thread_m_axi_input01_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        m_axi_input01_V_BREADY = ap_const_logic_1;
    } else {
        m_axi_input01_V_BREADY = ap_const_logic_0;
    }
}

void update_outdata::thread_m_axi_input01_V_RREADY() {
    m_axi_input01_V_RREADY = ap_const_logic_0;
}

void update_outdata::thread_m_axi_input01_V_WDATA() {
    m_axi_input01_V_WDATA = esl_concat<992,32>(esl_concat<960,32>(esl_concat<928,32>(esl_concat<896,32>(esl_concat<864,32>(esl_concat<832,32>(esl_concat<800,32>(esl_concat<768,32>(esl_concat<736,32>(esl_concat<704,32>(esl_concat<672,32>(esl_concat<640,32>(esl_concat<608,32>(esl_concat<576,32>(esl_concat<544,32>(esl_concat<512,32>(esl_concat<480,32>(esl_concat<448,32>(esl_concat<416,32>(esl_concat<384,32>(esl_concat<352,32>(esl_concat<320,32>(esl_concat<288,32>(esl_concat<256,32>(esl_concat<224,32>(esl_concat<192,32>(esl_concat<160,32>(esl_concat<128,32>(esl_concat<96,32>(esl_concat<64,32>(esl_concat<32,32>(tmp_31_reg_651_pp0_iter1_reg.read(), tmp_30_reg_646_pp0_iter1_reg.read()), tmp_29_reg_641_pp0_iter1_reg.read()), tmp_28_reg_636_pp0_iter1_reg.read()), tmp_27_reg_631_pp0_iter1_reg.read()), tmp_26_reg_626_pp0_iter1_reg.read()), tmp_25_reg_621_pp0_iter1_reg.read()), tmp_24_reg_616_pp0_iter1_reg.read()), tmp_23_reg_611_pp0_iter1_reg.read()), tmp_22_reg_606_pp0_iter1_reg.read()), tmp_21_reg_601_pp0_iter1_reg.read()), tmp_20_reg_596_pp0_iter1_reg.read()), tmp_19_reg_591_pp0_iter1_reg.read()), tmp_18_reg_586_pp0_iter1_reg.read()), tmp_17_reg_581_pp0_iter1_reg.read()), tmp_16_reg_576_pp0_iter1_reg.read()), tmp_15_reg_571_pp0_iter1_reg.read()), tmp_14_reg_566_pp0_iter1_reg.read()), tmp_13_reg_561_pp0_iter1_reg.read()), tmp_12_reg_556_pp0_iter1_reg.read()), tmp_11_reg_551_pp0_iter1_reg.read()), tmp_10_reg_546_pp0_iter1_reg.read()), tmp_5_reg_541_pp0_iter1_reg.read()), tmp_s_reg_536_pp0_iter1_reg.read()), tmp_9_reg_531_pp0_iter1_reg.read()), tmp_8_reg_526_pp0_iter1_reg.read()), tmp_7_reg_521_pp0_iter1_reg.read()), tmp_6_reg_516_pp0_iter1_reg.read()), tmp_3_reg_506_pp0_iter1_reg.read()), tmp_2_reg_501_pp0_iter1_reg.read()), tmp_1_reg_496_pp0_iter1_reg.read()), tmp_reg_491_pp0_iter1_reg.read());
}

void update_outdata::thread_m_axi_input01_V_WID() {
    m_axi_input01_V_WID = ap_const_lv1_0;
}

void update_outdata::thread_m_axi_input01_V_WLAST() {
    m_axi_input01_V_WLAST = ap_const_logic_0;
}

void update_outdata::thread_m_axi_input01_V_WSTRB() {
    m_axi_input01_V_WSTRB = ap_const_lv128_lc_2;
}

void update_outdata::thread_m_axi_input01_V_WUSER() {
    m_axi_input01_V_WUSER = ap_const_lv1_0;
}

void update_outdata::thread_m_axi_input01_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input01_V_WREADY.read()))) {
        m_axi_input01_V_WVALID = ap_const_logic_1;
    } else {
        m_axi_input01_V_WVALID = ap_const_logic_0;
    }
}

void update_outdata::thread_sext_cast_fu_154_p1() {
    sext_cast_fu_154_p1 = esl_zext<26,25>(input01_V_offset.read());
}

void update_outdata::thread_sum_cast_fu_444_p1() {
    sum_cast_fu_444_p1 = esl_zext<64,26>(sum_reg_511.read());
}

void update_outdata::thread_sum_fu_158_p2() {
    sum_fu_158_p2 = (!sext_cast_fu_154_p1.read().is_01() || !tmp_5_cast_fu_150_p1.read().is_01())? sc_lv<26>(): (sc_biguint<26>(sext_cast_fu_154_p1.read()) + sc_biguint<26>(tmp_5_cast_fu_150_p1.read()));
}

void update_outdata::thread_tmp_1_fu_134_p1() {
    tmp_1_fu_134_p1 = i_syn_in_rr_read.read().range(32-1, 0);
}

void update_outdata::thread_tmp_2_fu_138_p1() {
    tmp_2_fu_138_p1 = r_ref_r_read.read().range(32-1, 0);
}

void update_outdata::thread_tmp_3_fu_142_p1() {
    tmp_3_fu_142_p1 = V_m_r_read.read().range(32-1, 0);
}

void update_outdata::thread_tmp_4_fu_146_p1() {
    tmp_4_fu_146_p1 = num.read().range(18-1, 0);
}

void update_outdata::thread_tmp_5_cast_fu_150_p1() {
    tmp_5_cast_fu_150_p1 = esl_zext<26,18>(tmp_4_fu_146_p1.read());
}

void update_outdata::thread_tmp_fu_130_p1() {
    tmp_fu_130_p1 = i_syn_ex_rr_read.read().range(32-1, 0);
}

void update_outdata::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

