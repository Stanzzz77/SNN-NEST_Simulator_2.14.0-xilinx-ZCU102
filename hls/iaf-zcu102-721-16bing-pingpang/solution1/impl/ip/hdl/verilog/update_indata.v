// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_indata (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input00_V_AWVALID,
        m_axi_input00_V_AWREADY,
        m_axi_input00_V_AWADDR,
        m_axi_input00_V_AWID,
        m_axi_input00_V_AWLEN,
        m_axi_input00_V_AWSIZE,
        m_axi_input00_V_AWBURST,
        m_axi_input00_V_AWLOCK,
        m_axi_input00_V_AWCACHE,
        m_axi_input00_V_AWPROT,
        m_axi_input00_V_AWQOS,
        m_axi_input00_V_AWREGION,
        m_axi_input00_V_AWUSER,
        m_axi_input00_V_WVALID,
        m_axi_input00_V_WREADY,
        m_axi_input00_V_WDATA,
        m_axi_input00_V_WSTRB,
        m_axi_input00_V_WLAST,
        m_axi_input00_V_WID,
        m_axi_input00_V_WUSER,
        m_axi_input00_V_ARVALID,
        m_axi_input00_V_ARREADY,
        m_axi_input00_V_ARADDR,
        m_axi_input00_V_ARID,
        m_axi_input00_V_ARLEN,
        m_axi_input00_V_ARSIZE,
        m_axi_input00_V_ARBURST,
        m_axi_input00_V_ARLOCK,
        m_axi_input00_V_ARCACHE,
        m_axi_input00_V_ARPROT,
        m_axi_input00_V_ARQOS,
        m_axi_input00_V_ARREGION,
        m_axi_input00_V_ARUSER,
        m_axi_input00_V_RVALID,
        m_axi_input00_V_RREADY,
        m_axi_input00_V_RDATA,
        m_axi_input00_V_RLAST,
        m_axi_input00_V_RID,
        m_axi_input00_V_RUSER,
        m_axi_input00_V_RRESP,
        m_axi_input00_V_BVALID,
        m_axi_input00_V_BREADY,
        m_axi_input00_V_BRESP,
        m_axi_input00_V_BID,
        m_axi_input00_V_BUSER,
        m_axi_input01_V_AWVALID,
        m_axi_input01_V_AWREADY,
        m_axi_input01_V_AWADDR,
        m_axi_input01_V_AWID,
        m_axi_input01_V_AWLEN,
        m_axi_input01_V_AWSIZE,
        m_axi_input01_V_AWBURST,
        m_axi_input01_V_AWLOCK,
        m_axi_input01_V_AWCACHE,
        m_axi_input01_V_AWPROT,
        m_axi_input01_V_AWQOS,
        m_axi_input01_V_AWREGION,
        m_axi_input01_V_AWUSER,
        m_axi_input01_V_WVALID,
        m_axi_input01_V_WREADY,
        m_axi_input01_V_WDATA,
        m_axi_input01_V_WSTRB,
        m_axi_input01_V_WLAST,
        m_axi_input01_V_WID,
        m_axi_input01_V_WUSER,
        m_axi_input01_V_ARVALID,
        m_axi_input01_V_ARREADY,
        m_axi_input01_V_ARADDR,
        m_axi_input01_V_ARID,
        m_axi_input01_V_ARLEN,
        m_axi_input01_V_ARSIZE,
        m_axi_input01_V_ARBURST,
        m_axi_input01_V_ARLOCK,
        m_axi_input01_V_ARCACHE,
        m_axi_input01_V_ARPROT,
        m_axi_input01_V_ARQOS,
        m_axi_input01_V_ARREGION,
        m_axi_input01_V_ARUSER,
        m_axi_input01_V_RVALID,
        m_axi_input01_V_RREADY,
        m_axi_input01_V_RDATA,
        m_axi_input01_V_RLAST,
        m_axi_input01_V_RID,
        m_axi_input01_V_RUSER,
        m_axi_input01_V_RRESP,
        m_axi_input01_V_BVALID,
        m_axi_input01_V_BREADY,
        m_axi_input01_V_BRESP,
        m_axi_input01_V_BID,
        m_axi_input01_V_BUSER,
        ap_ce,
        i,
        input00_V_offset,
        input01_V_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        input00_V_blk_n_AR,
        input00_V_blk_n_R,
        input01_V_blk_n_AR,
        input01_V_blk_n_R
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input00_V_AWVALID;
input   m_axi_input00_V_AWREADY;
output  [31:0] m_axi_input00_V_AWADDR;
output  [0:0] m_axi_input00_V_AWID;
output  [31:0] m_axi_input00_V_AWLEN;
output  [2:0] m_axi_input00_V_AWSIZE;
output  [1:0] m_axi_input00_V_AWBURST;
output  [1:0] m_axi_input00_V_AWLOCK;
output  [3:0] m_axi_input00_V_AWCACHE;
output  [2:0] m_axi_input00_V_AWPROT;
output  [3:0] m_axi_input00_V_AWQOS;
output  [3:0] m_axi_input00_V_AWREGION;
output  [0:0] m_axi_input00_V_AWUSER;
output   m_axi_input00_V_WVALID;
input   m_axi_input00_V_WREADY;
output  [1023:0] m_axi_input00_V_WDATA;
output  [127:0] m_axi_input00_V_WSTRB;
output   m_axi_input00_V_WLAST;
output  [0:0] m_axi_input00_V_WID;
output  [0:0] m_axi_input00_V_WUSER;
output   m_axi_input00_V_ARVALID;
input   m_axi_input00_V_ARREADY;
output  [31:0] m_axi_input00_V_ARADDR;
output  [0:0] m_axi_input00_V_ARID;
output  [31:0] m_axi_input00_V_ARLEN;
output  [2:0] m_axi_input00_V_ARSIZE;
output  [1:0] m_axi_input00_V_ARBURST;
output  [1:0] m_axi_input00_V_ARLOCK;
output  [3:0] m_axi_input00_V_ARCACHE;
output  [2:0] m_axi_input00_V_ARPROT;
output  [3:0] m_axi_input00_V_ARQOS;
output  [3:0] m_axi_input00_V_ARREGION;
output  [0:0] m_axi_input00_V_ARUSER;
input   m_axi_input00_V_RVALID;
output   m_axi_input00_V_RREADY;
input  [1023:0] m_axi_input00_V_RDATA;
input   m_axi_input00_V_RLAST;
input  [0:0] m_axi_input00_V_RID;
input  [0:0] m_axi_input00_V_RUSER;
input  [1:0] m_axi_input00_V_RRESP;
input   m_axi_input00_V_BVALID;
output   m_axi_input00_V_BREADY;
input  [1:0] m_axi_input00_V_BRESP;
input  [0:0] m_axi_input00_V_BID;
input  [0:0] m_axi_input00_V_BUSER;
output   m_axi_input01_V_AWVALID;
input   m_axi_input01_V_AWREADY;
output  [31:0] m_axi_input01_V_AWADDR;
output  [0:0] m_axi_input01_V_AWID;
output  [31:0] m_axi_input01_V_AWLEN;
output  [2:0] m_axi_input01_V_AWSIZE;
output  [1:0] m_axi_input01_V_AWBURST;
output  [1:0] m_axi_input01_V_AWLOCK;
output  [3:0] m_axi_input01_V_AWCACHE;
output  [2:0] m_axi_input01_V_AWPROT;
output  [3:0] m_axi_input01_V_AWQOS;
output  [3:0] m_axi_input01_V_AWREGION;
output  [0:0] m_axi_input01_V_AWUSER;
output   m_axi_input01_V_WVALID;
input   m_axi_input01_V_WREADY;
output  [1023:0] m_axi_input01_V_WDATA;
output  [127:0] m_axi_input01_V_WSTRB;
output   m_axi_input01_V_WLAST;
output  [0:0] m_axi_input01_V_WID;
output  [0:0] m_axi_input01_V_WUSER;
output   m_axi_input01_V_ARVALID;
input   m_axi_input01_V_ARREADY;
output  [31:0] m_axi_input01_V_ARADDR;
output  [0:0] m_axi_input01_V_ARID;
output  [31:0] m_axi_input01_V_ARLEN;
output  [2:0] m_axi_input01_V_ARSIZE;
output  [1:0] m_axi_input01_V_ARBURST;
output  [1:0] m_axi_input01_V_ARLOCK;
output  [3:0] m_axi_input01_V_ARCACHE;
output  [2:0] m_axi_input01_V_ARPROT;
output  [3:0] m_axi_input01_V_ARQOS;
output  [3:0] m_axi_input01_V_ARREGION;
output  [0:0] m_axi_input01_V_ARUSER;
input   m_axi_input01_V_RVALID;
output   m_axi_input01_V_RREADY;
input  [1023:0] m_axi_input01_V_RDATA;
input   m_axi_input01_V_RLAST;
input  [0:0] m_axi_input01_V_RID;
input  [0:0] m_axi_input01_V_RUSER;
input  [1:0] m_axi_input01_V_RRESP;
input   m_axi_input01_V_BVALID;
output   m_axi_input01_V_BREADY;
input  [1:0] m_axi_input01_V_BRESP;
input  [0:0] m_axi_input01_V_BID;
input  [0:0] m_axi_input01_V_BUSER;
input   ap_ce;
input  [29:0] i;
input  [24:0] input00_V_offset;
input  [24:0] input01_V_offset;
output  [255:0] ap_return_0;
output  [255:0] ap_return_1;
output  [255:0] ap_return_2;
output  [255:0] ap_return_3;
output  [255:0] ap_return_4;
output  [255:0] ap_return_5;
output  [255:0] ap_return_6;
output   input00_V_blk_n_AR;
output   input00_V_blk_n_R;
output   input01_V_blk_n_AR;
output   input01_V_blk_n_R;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input00_V_ARVALID;
reg m_axi_input00_V_RREADY;
reg m_axi_input01_V_ARVALID;
reg m_axi_input01_V_RREADY;
reg input00_V_blk_n_AR;
reg input00_V_blk_n_R;
reg input01_V_blk_n_AR;
reg input01_V_blk_n_R;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_sig_ioackin_m_axi_input00_V_ARREADY;
reg    ap_sig_ioackin_m_axi_input01_V_ARREADY;
reg    ap_block_state2_io;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
wire   [25:0] sum_fu_222_p2;
reg   [25:0] sum_reg_988;
wire   [25:0] sum3_fu_232_p2;
reg   [25:0] sum3_reg_993;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] sum_cast_fu_238_p1;
wire   [63:0] sum3_cast_fu_248_p1;
reg    ap_reg_ioackin_m_axi_input00_V_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_input01_V_ARREADY;
wire   [17:0] tmp_fu_210_p1;
wire   [25:0] sext_cast_fu_218_p1;
wire   [25:0] tmp_cast_fu_214_p1;
wire   [25:0] sext2_cast_fu_228_p1;
wire   [31:0] p_Result_11_fu_736_p4;
wire   [31:0] p_Result_10_fu_666_p4;
wire   [31:0] p_Result_6_fu_596_p4;
wire   [31:0] p_Result_s_fu_526_p4;
wire   [31:0] p_Result_3_fu_456_p4;
wire   [31:0] p_Result_2_fu_386_p4;
wire   [31:0] p_Result_1_fu_316_p4;
wire   [31:0] tmp_68_fu_258_p1;
wire   [31:0] p_Result_4_7_fu_766_p4;
wire   [31:0] p_Result_4_6_fu_676_p4;
wire   [31:0] p_Result_4_5_fu_606_p4;
wire   [31:0] p_Result_4_4_fu_536_p4;
wire   [31:0] p_Result_4_3_fu_466_p4;
wire   [31:0] p_Result_4_2_fu_396_p4;
wire   [31:0] p_Result_4_1_fu_326_p4;
wire   [31:0] p_Result_4_fu_262_p4;
wire   [31:0] p_Result_5_7_fu_796_p4;
wire   [31:0] p_Result_5_6_fu_686_p4;
wire   [31:0] p_Result_5_5_fu_616_p4;
wire   [31:0] p_Result_5_4_fu_546_p4;
wire   [31:0] p_Result_5_3_fu_476_p4;
wire   [31:0] p_Result_5_2_fu_406_p4;
wire   [31:0] p_Result_5_1_fu_336_p4;
wire   [31:0] p_Result_5_fu_272_p4;
wire   [31:0] p_Result_6_7_fu_826_p4;
wire   [31:0] p_Result_6_6_fu_696_p4;
wire   [31:0] p_Result_6_5_fu_626_p4;
wire   [31:0] p_Result_6_4_fu_556_p4;
wire   [31:0] p_Result_6_3_fu_486_p4;
wire   [31:0] p_Result_6_2_fu_416_p4;
wire   [31:0] p_Result_6_1_fu_346_p4;
wire   [31:0] tmp_69_fu_282_p1;
wire   [31:0] p_Result_7_7_fu_856_p4;
wire   [31:0] p_Result_7_6_fu_706_p4;
wire   [31:0] p_Result_7_5_fu_636_p4;
wire   [31:0] p_Result_7_4_fu_566_p4;
wire   [31:0] p_Result_7_3_fu_496_p4;
wire   [31:0] p_Result_7_2_fu_426_p4;
wire   [31:0] p_Result_7_1_fu_356_p4;
wire   [31:0] p_Result_7_fu_286_p4;
wire   [31:0] p_Result_8_7_fu_886_p4;
wire   [31:0] p_Result_8_6_fu_716_p4;
wire   [31:0] p_Result_8_5_fu_646_p4;
wire   [31:0] p_Result_8_4_fu_576_p4;
wire   [31:0] p_Result_8_3_fu_506_p4;
wire   [31:0] p_Result_8_2_fu_436_p4;
wire   [31:0] p_Result_8_1_fu_366_p4;
wire   [31:0] p_Result_8_fu_296_p4;
wire   [31:0] p_Result_9_7_fu_916_p4;
wire   [31:0] p_Result_9_6_fu_726_p4;
wire   [31:0] p_Result_9_5_fu_656_p4;
wire   [31:0] p_Result_9_4_fu_586_p4;
wire   [31:0] p_Result_9_3_fu_516_p4;
wire   [31:0] p_Result_9_2_fu_446_p4;
wire   [31:0] p_Result_9_1_fu_376_p4;
wire   [31:0] p_Result_9_fu_306_p4;
wire   [255:0] weighted_spikes_ex_s_fu_746_p9;
wire   [255:0] weighted_spikes_in_s_fu_776_p9;
wire   [255:0] I_e_s_fu_806_p9;
wire   [255:0] i_syn_ex_s_fu_836_p9;
wire   [255:0] i_syn_in_s_fu_866_p9;
wire   [255:0] r_ref_s_fu_896_p9;
wire   [255:0] V_m_s_fu_926_p9;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to7;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_900;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_reg_ioackin_m_axi_input00_V_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_input01_V_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input00_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_900)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_input00_V_ARREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_input00_V_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_input00_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input01_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_900)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_input01_V_ARREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_input01_V_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_input01_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum3_reg_993 <= sum3_fu_232_p2;
        sum_reg_988 <= sum_fu_222_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to7 = 1'b1;
    end else begin
        ap_idle_pp0_0to7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to7 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_input00_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_input00_V_ARREADY = m_axi_input00_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input00_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_input01_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_input01_V_ARREADY = m_axi_input01_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input01_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input00_V_blk_n_AR = m_axi_input00_V_ARREADY;
    end else begin
        input00_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input00_V_blk_n_R = m_axi_input00_V_RVALID;
    end else begin
        input00_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input01_V_blk_n_AR = m_axi_input01_V_ARREADY;
    end else begin
        input01_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input01_V_blk_n_R = m_axi_input01_V_RVALID;
    end else begin
        input01_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_input00_V_ARREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        m_axi_input00_V_ARVALID = 1'b1;
    end else begin
        m_axi_input00_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_input00_V_RREADY = 1'b1;
    end else begin
        m_axi_input00_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_input01_V_ARREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        m_axi_input01_V_ARVALID = 1'b1;
    end else begin
        m_axi_input01_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_input01_V_RREADY = 1'b1;
    end else begin
        m_axi_input01_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_e_s_fu_806_p9 = {{{{{{{{p_Result_5_7_fu_796_p4}, {p_Result_5_6_fu_686_p4}}, {p_Result_5_5_fu_616_p4}}, {p_Result_5_4_fu_546_p4}}, {p_Result_5_3_fu_476_p4}}, {p_Result_5_2_fu_406_p4}}, {p_Result_5_1_fu_336_p4}}, {p_Result_5_fu_272_p4}};

assign V_m_s_fu_926_p9 = {{{{{{{{p_Result_9_7_fu_916_p4}, {p_Result_9_6_fu_726_p4}}, {p_Result_9_5_fu_656_p4}}, {p_Result_9_4_fu_586_p4}}, {p_Result_9_3_fu_516_p4}}, {p_Result_9_2_fu_446_p4}}, {p_Result_9_1_fu_376_p4}}, {p_Result_9_fu_306_p4}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((m_axi_input00_V_RVALID == 1'b0) | (m_axi_input01_V_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((m_axi_input00_V_RVALID == 1'b0) | (m_axi_input01_V_RVALID == 1'b0))) | ((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((m_axi_input00_V_RVALID == 1'b0) | (m_axi_input01_V_RVALID == 1'b0))) | ((1'b1 == ap_block_state2_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((ap_sig_ioackin_m_axi_input01_V_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_input00_V_ARREADY == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((m_axi_input00_V_RVALID == 1'b0) | (m_axi_input01_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_condition_900 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = weighted_spikes_ex_s_fu_746_p9;

assign ap_return_1 = weighted_spikes_in_s_fu_776_p9;

assign ap_return_2 = I_e_s_fu_806_p9;

assign ap_return_3 = i_syn_ex_s_fu_836_p9;

assign ap_return_4 = i_syn_in_s_fu_866_p9;

assign ap_return_5 = r_ref_s_fu_896_p9;

assign ap_return_6 = V_m_s_fu_926_p9;

assign i_syn_ex_s_fu_836_p9 = {{{{{{{{p_Result_6_7_fu_826_p4}, {p_Result_6_6_fu_696_p4}}, {p_Result_6_5_fu_626_p4}}, {p_Result_6_4_fu_556_p4}}, {p_Result_6_3_fu_486_p4}}, {p_Result_6_2_fu_416_p4}}, {p_Result_6_1_fu_346_p4}}, {tmp_69_fu_282_p1}};

assign i_syn_in_s_fu_866_p9 = {{{{{{{{p_Result_7_7_fu_856_p4}, {p_Result_7_6_fu_706_p4}}, {p_Result_7_5_fu_636_p4}}, {p_Result_7_4_fu_566_p4}}, {p_Result_7_3_fu_496_p4}}, {p_Result_7_2_fu_426_p4}}, {p_Result_7_1_fu_356_p4}}, {p_Result_7_fu_286_p4}};

assign m_axi_input00_V_ARADDR = sum_cast_fu_238_p1;

assign m_axi_input00_V_ARBURST = 2'd0;

assign m_axi_input00_V_ARCACHE = 4'd0;

assign m_axi_input00_V_ARID = 1'd0;

assign m_axi_input00_V_ARLEN = 32'd1;

assign m_axi_input00_V_ARLOCK = 2'd0;

assign m_axi_input00_V_ARPROT = 3'd0;

assign m_axi_input00_V_ARQOS = 4'd0;

assign m_axi_input00_V_ARREGION = 4'd0;

assign m_axi_input00_V_ARSIZE = 3'd0;

assign m_axi_input00_V_ARUSER = 1'd0;

assign m_axi_input00_V_AWADDR = 32'd0;

assign m_axi_input00_V_AWBURST = 2'd0;

assign m_axi_input00_V_AWCACHE = 4'd0;

assign m_axi_input00_V_AWID = 1'd0;

assign m_axi_input00_V_AWLEN = 32'd0;

assign m_axi_input00_V_AWLOCK = 2'd0;

assign m_axi_input00_V_AWPROT = 3'd0;

assign m_axi_input00_V_AWQOS = 4'd0;

assign m_axi_input00_V_AWREGION = 4'd0;

assign m_axi_input00_V_AWSIZE = 3'd0;

assign m_axi_input00_V_AWUSER = 1'd0;

assign m_axi_input00_V_AWVALID = 1'b0;

assign m_axi_input00_V_BREADY = 1'b0;

assign m_axi_input00_V_WDATA = 1024'd0;

assign m_axi_input00_V_WID = 1'd0;

assign m_axi_input00_V_WLAST = 1'b0;

assign m_axi_input00_V_WSTRB = 128'd0;

assign m_axi_input00_V_WUSER = 1'd0;

assign m_axi_input00_V_WVALID = 1'b0;

assign m_axi_input01_V_ARADDR = sum3_cast_fu_248_p1;

assign m_axi_input01_V_ARBURST = 2'd0;

assign m_axi_input01_V_ARCACHE = 4'd0;

assign m_axi_input01_V_ARID = 1'd0;

assign m_axi_input01_V_ARLEN = 32'd1;

assign m_axi_input01_V_ARLOCK = 2'd0;

assign m_axi_input01_V_ARPROT = 3'd0;

assign m_axi_input01_V_ARQOS = 4'd0;

assign m_axi_input01_V_ARREGION = 4'd0;

assign m_axi_input01_V_ARSIZE = 3'd0;

assign m_axi_input01_V_ARUSER = 1'd0;

assign m_axi_input01_V_AWADDR = 32'd0;

assign m_axi_input01_V_AWBURST = 2'd0;

assign m_axi_input01_V_AWCACHE = 4'd0;

assign m_axi_input01_V_AWID = 1'd0;

assign m_axi_input01_V_AWLEN = 32'd0;

assign m_axi_input01_V_AWLOCK = 2'd0;

assign m_axi_input01_V_AWPROT = 3'd0;

assign m_axi_input01_V_AWQOS = 4'd0;

assign m_axi_input01_V_AWREGION = 4'd0;

assign m_axi_input01_V_AWSIZE = 3'd0;

assign m_axi_input01_V_AWUSER = 1'd0;

assign m_axi_input01_V_AWVALID = 1'b0;

assign m_axi_input01_V_BREADY = 1'b0;

assign m_axi_input01_V_WDATA = 1024'd0;

assign m_axi_input01_V_WID = 1'd0;

assign m_axi_input01_V_WLAST = 1'b0;

assign m_axi_input01_V_WSTRB = 128'd0;

assign m_axi_input01_V_WUSER = 1'd0;

assign m_axi_input01_V_WVALID = 1'b0;

assign p_Result_10_fu_666_p4 = {{m_axi_input00_V_RDATA[799:768]}};

assign p_Result_11_fu_736_p4 = {{m_axi_input00_V_RDATA[927:896]}};

assign p_Result_1_fu_316_p4 = {{m_axi_input00_V_RDATA[159:128]}};

assign p_Result_2_fu_386_p4 = {{m_axi_input00_V_RDATA[287:256]}};

assign p_Result_3_fu_456_p4 = {{m_axi_input00_V_RDATA[415:384]}};

assign p_Result_4_1_fu_326_p4 = {{m_axi_input00_V_RDATA[191:160]}};

assign p_Result_4_2_fu_396_p4 = {{m_axi_input00_V_RDATA[319:288]}};

assign p_Result_4_3_fu_466_p4 = {{m_axi_input00_V_RDATA[447:416]}};

assign p_Result_4_4_fu_536_p4 = {{m_axi_input00_V_RDATA[575:544]}};

assign p_Result_4_5_fu_606_p4 = {{m_axi_input00_V_RDATA[703:672]}};

assign p_Result_4_6_fu_676_p4 = {{m_axi_input00_V_RDATA[831:800]}};

assign p_Result_4_7_fu_766_p4 = {{m_axi_input00_V_RDATA[959:928]}};

assign p_Result_4_fu_262_p4 = {{m_axi_input00_V_RDATA[63:32]}};

assign p_Result_5_1_fu_336_p4 = {{m_axi_input00_V_RDATA[223:192]}};

assign p_Result_5_2_fu_406_p4 = {{m_axi_input00_V_RDATA[351:320]}};

assign p_Result_5_3_fu_476_p4 = {{m_axi_input00_V_RDATA[479:448]}};

assign p_Result_5_4_fu_546_p4 = {{m_axi_input00_V_RDATA[607:576]}};

assign p_Result_5_5_fu_616_p4 = {{m_axi_input00_V_RDATA[735:704]}};

assign p_Result_5_6_fu_686_p4 = {{m_axi_input00_V_RDATA[863:832]}};

assign p_Result_5_7_fu_796_p4 = {{m_axi_input00_V_RDATA[991:960]}};

assign p_Result_5_fu_272_p4 = {{m_axi_input00_V_RDATA[95:64]}};

assign p_Result_6_1_fu_346_p4 = {{m_axi_input01_V_RDATA[159:128]}};

assign p_Result_6_2_fu_416_p4 = {{m_axi_input01_V_RDATA[287:256]}};

assign p_Result_6_3_fu_486_p4 = {{m_axi_input01_V_RDATA[415:384]}};

assign p_Result_6_4_fu_556_p4 = {{m_axi_input01_V_RDATA[543:512]}};

assign p_Result_6_5_fu_626_p4 = {{m_axi_input01_V_RDATA[671:640]}};

assign p_Result_6_6_fu_696_p4 = {{m_axi_input01_V_RDATA[799:768]}};

assign p_Result_6_7_fu_826_p4 = {{m_axi_input01_V_RDATA[927:896]}};

assign p_Result_6_fu_596_p4 = {{m_axi_input00_V_RDATA[671:640]}};

assign p_Result_7_1_fu_356_p4 = {{m_axi_input01_V_RDATA[191:160]}};

assign p_Result_7_2_fu_426_p4 = {{m_axi_input01_V_RDATA[319:288]}};

assign p_Result_7_3_fu_496_p4 = {{m_axi_input01_V_RDATA[447:416]}};

assign p_Result_7_4_fu_566_p4 = {{m_axi_input01_V_RDATA[575:544]}};

assign p_Result_7_5_fu_636_p4 = {{m_axi_input01_V_RDATA[703:672]}};

assign p_Result_7_6_fu_706_p4 = {{m_axi_input01_V_RDATA[831:800]}};

assign p_Result_7_7_fu_856_p4 = {{m_axi_input01_V_RDATA[959:928]}};

assign p_Result_7_fu_286_p4 = {{m_axi_input01_V_RDATA[63:32]}};

assign p_Result_8_1_fu_366_p4 = {{m_axi_input01_V_RDATA[223:192]}};

assign p_Result_8_2_fu_436_p4 = {{m_axi_input01_V_RDATA[351:320]}};

assign p_Result_8_3_fu_506_p4 = {{m_axi_input01_V_RDATA[479:448]}};

assign p_Result_8_4_fu_576_p4 = {{m_axi_input01_V_RDATA[607:576]}};

assign p_Result_8_5_fu_646_p4 = {{m_axi_input01_V_RDATA[735:704]}};

assign p_Result_8_6_fu_716_p4 = {{m_axi_input01_V_RDATA[863:832]}};

assign p_Result_8_7_fu_886_p4 = {{m_axi_input01_V_RDATA[991:960]}};

assign p_Result_8_fu_296_p4 = {{m_axi_input01_V_RDATA[95:64]}};

assign p_Result_9_1_fu_376_p4 = {{m_axi_input01_V_RDATA[255:224]}};

assign p_Result_9_2_fu_446_p4 = {{m_axi_input01_V_RDATA[383:352]}};

assign p_Result_9_3_fu_516_p4 = {{m_axi_input01_V_RDATA[511:480]}};

assign p_Result_9_4_fu_586_p4 = {{m_axi_input01_V_RDATA[639:608]}};

assign p_Result_9_5_fu_656_p4 = {{m_axi_input01_V_RDATA[767:736]}};

assign p_Result_9_6_fu_726_p4 = {{m_axi_input01_V_RDATA[895:864]}};

assign p_Result_9_7_fu_916_p4 = {{m_axi_input01_V_RDATA[1023:992]}};

assign p_Result_9_fu_306_p4 = {{m_axi_input01_V_RDATA[127:96]}};

assign p_Result_s_fu_526_p4 = {{m_axi_input00_V_RDATA[543:512]}};

assign r_ref_s_fu_896_p9 = {{{{{{{{p_Result_8_7_fu_886_p4}, {p_Result_8_6_fu_716_p4}}, {p_Result_8_5_fu_646_p4}}, {p_Result_8_4_fu_576_p4}}, {p_Result_8_3_fu_506_p4}}, {p_Result_8_2_fu_436_p4}}, {p_Result_8_1_fu_366_p4}}, {p_Result_8_fu_296_p4}};

assign sext2_cast_fu_228_p1 = input01_V_offset;

assign sext_cast_fu_218_p1 = input00_V_offset;

assign sum3_cast_fu_248_p1 = sum3_reg_993;

assign sum3_fu_232_p2 = (sext2_cast_fu_228_p1 + tmp_cast_fu_214_p1);

assign sum_cast_fu_238_p1 = sum_reg_988;

assign sum_fu_222_p2 = (sext_cast_fu_218_p1 + tmp_cast_fu_214_p1);

assign tmp_68_fu_258_p1 = m_axi_input00_V_RDATA[31:0];

assign tmp_69_fu_282_p1 = m_axi_input01_V_RDATA[31:0];

assign tmp_cast_fu_214_p1 = tmp_fu_210_p1;

assign tmp_fu_210_p1 = i[17:0];

assign weighted_spikes_ex_s_fu_746_p9 = {{{{{{{{p_Result_11_fu_736_p4}, {p_Result_10_fu_666_p4}}, {p_Result_6_fu_596_p4}}, {p_Result_s_fu_526_p4}}, {p_Result_3_fu_456_p4}}, {p_Result_2_fu_386_p4}}, {p_Result_1_fu_316_p4}}, {tmp_68_fu_258_p1}};

assign weighted_spikes_in_s_fu_776_p9 = {{{{{{{{p_Result_4_7_fu_766_p4}, {p_Result_4_6_fu_676_p4}}, {p_Result_4_5_fu_606_p4}}, {p_Result_4_4_fu_536_p4}}, {p_Result_4_3_fu_466_p4}}, {p_Result_4_2_fu_396_p4}}, {p_Result_4_1_fu_326_p4}}, {p_Result_4_fu_262_p4}};

endmodule //update_indata
