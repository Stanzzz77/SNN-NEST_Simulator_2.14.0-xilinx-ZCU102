// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_outdata (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input01_V_AWVALID,
        m_axi_input01_V_AWREADY,
        m_axi_input01_V_AWADDR,
        m_axi_input01_V_AWID,
        m_axi_input01_V_AWLEN,
        m_axi_input01_V_AWSIZE,
        m_axi_input01_V_AWBURST,
        m_axi_input01_V_AWLOCK,
        m_axi_input01_V_AWCACHE,
        m_axi_input01_V_AWPROT,
        m_axi_input01_V_AWQOS,
        m_axi_input01_V_AWREGION,
        m_axi_input01_V_AWUSER,
        m_axi_input01_V_WVALID,
        m_axi_input01_V_WREADY,
        m_axi_input01_V_WDATA,
        m_axi_input01_V_WSTRB,
        m_axi_input01_V_WLAST,
        m_axi_input01_V_WID,
        m_axi_input01_V_WUSER,
        m_axi_input01_V_ARVALID,
        m_axi_input01_V_ARREADY,
        m_axi_input01_V_ARADDR,
        m_axi_input01_V_ARID,
        m_axi_input01_V_ARLEN,
        m_axi_input01_V_ARSIZE,
        m_axi_input01_V_ARBURST,
        m_axi_input01_V_ARLOCK,
        m_axi_input01_V_ARCACHE,
        m_axi_input01_V_ARPROT,
        m_axi_input01_V_ARQOS,
        m_axi_input01_V_ARREGION,
        m_axi_input01_V_ARUSER,
        m_axi_input01_V_RVALID,
        m_axi_input01_V_RREADY,
        m_axi_input01_V_RDATA,
        m_axi_input01_V_RLAST,
        m_axi_input01_V_RID,
        m_axi_input01_V_RUSER,
        m_axi_input01_V_RRESP,
        m_axi_input01_V_BVALID,
        m_axi_input01_V_BREADY,
        m_axi_input01_V_BRESP,
        m_axi_input01_V_BID,
        m_axi_input01_V_BUSER,
        ap_ce,
        num,
        V_m_r_read,
        i_syn_ex_rr_read,
        i_syn_in_rr_read,
        r_ref_r_read,
        input01_V_offset,
        input01_V_blk_n_AW,
        input01_V_blk_n_W,
        input01_V_blk_n_B
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input01_V_AWVALID;
input   m_axi_input01_V_AWREADY;
output  [31:0] m_axi_input01_V_AWADDR;
output  [0:0] m_axi_input01_V_AWID;
output  [31:0] m_axi_input01_V_AWLEN;
output  [2:0] m_axi_input01_V_AWSIZE;
output  [1:0] m_axi_input01_V_AWBURST;
output  [1:0] m_axi_input01_V_AWLOCK;
output  [3:0] m_axi_input01_V_AWCACHE;
output  [2:0] m_axi_input01_V_AWPROT;
output  [3:0] m_axi_input01_V_AWQOS;
output  [3:0] m_axi_input01_V_AWREGION;
output  [0:0] m_axi_input01_V_AWUSER;
output   m_axi_input01_V_WVALID;
input   m_axi_input01_V_WREADY;
output  [1023:0] m_axi_input01_V_WDATA;
output  [127:0] m_axi_input01_V_WSTRB;
output   m_axi_input01_V_WLAST;
output  [0:0] m_axi_input01_V_WID;
output  [0:0] m_axi_input01_V_WUSER;
output   m_axi_input01_V_ARVALID;
input   m_axi_input01_V_ARREADY;
output  [31:0] m_axi_input01_V_ARADDR;
output  [0:0] m_axi_input01_V_ARID;
output  [31:0] m_axi_input01_V_ARLEN;
output  [2:0] m_axi_input01_V_ARSIZE;
output  [1:0] m_axi_input01_V_ARBURST;
output  [1:0] m_axi_input01_V_ARLOCK;
output  [3:0] m_axi_input01_V_ARCACHE;
output  [2:0] m_axi_input01_V_ARPROT;
output  [3:0] m_axi_input01_V_ARQOS;
output  [3:0] m_axi_input01_V_ARREGION;
output  [0:0] m_axi_input01_V_ARUSER;
input   m_axi_input01_V_RVALID;
output   m_axi_input01_V_RREADY;
input  [1023:0] m_axi_input01_V_RDATA;
input   m_axi_input01_V_RLAST;
input  [0:0] m_axi_input01_V_RID;
input  [0:0] m_axi_input01_V_RUSER;
input  [1:0] m_axi_input01_V_RRESP;
input   m_axi_input01_V_BVALID;
output   m_axi_input01_V_BREADY;
input  [1:0] m_axi_input01_V_BRESP;
input  [0:0] m_axi_input01_V_BID;
input  [0:0] m_axi_input01_V_BUSER;
input   ap_ce;
input  [29:0] num;
input  [255:0] V_m_r_read;
input  [255:0] i_syn_ex_rr_read;
input  [255:0] i_syn_in_rr_read;
input  [255:0] r_ref_r_read;
input  [24:0] input01_V_offset;
output   input01_V_blk_n_AW;
output   input01_V_blk_n_W;
output   input01_V_blk_n_B;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input01_V_AWVALID;
reg m_axi_input01_V_WVALID;
reg m_axi_input01_V_BREADY;
reg input01_V_blk_n_AW;
reg input01_V_blk_n_W;
reg input01_V_blk_n_B;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_sig_ioackin_m_axi_input01_V_AWREADY;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_input01_V_WREADY;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_fu_130_p1;
reg   [31:0] tmp_reg_491;
reg   [31:0] tmp_reg_491_pp0_iter1_reg;
wire   [31:0] tmp_1_fu_134_p1;
reg   [31:0] tmp_1_reg_496;
reg   [31:0] tmp_1_reg_496_pp0_iter1_reg;
wire   [31:0] tmp_2_fu_138_p1;
reg   [31:0] tmp_2_reg_501;
reg   [31:0] tmp_2_reg_501_pp0_iter1_reg;
wire   [31:0] tmp_3_fu_142_p1;
reg   [31:0] tmp_3_reg_506;
reg   [31:0] tmp_3_reg_506_pp0_iter1_reg;
wire   [25:0] sum_fu_158_p2;
reg   [25:0] sum_reg_511;
reg   [31:0] tmp_6_reg_516;
reg   [31:0] tmp_6_reg_516_pp0_iter1_reg;
reg   [31:0] tmp_7_reg_521;
reg   [31:0] tmp_7_reg_521_pp0_iter1_reg;
reg   [31:0] tmp_8_reg_526;
reg   [31:0] tmp_8_reg_526_pp0_iter1_reg;
reg   [31:0] tmp_9_reg_531;
reg   [31:0] tmp_9_reg_531_pp0_iter1_reg;
reg   [31:0] tmp_s_reg_536;
reg   [31:0] tmp_s_reg_536_pp0_iter1_reg;
reg   [31:0] tmp_5_reg_541;
reg   [31:0] tmp_5_reg_541_pp0_iter1_reg;
reg   [31:0] tmp_10_reg_546;
reg   [31:0] tmp_10_reg_546_pp0_iter1_reg;
reg   [31:0] tmp_11_reg_551;
reg   [31:0] tmp_11_reg_551_pp0_iter1_reg;
reg   [31:0] tmp_12_reg_556;
reg   [31:0] tmp_12_reg_556_pp0_iter1_reg;
reg   [31:0] tmp_13_reg_561;
reg   [31:0] tmp_13_reg_561_pp0_iter1_reg;
reg   [31:0] tmp_14_reg_566;
reg   [31:0] tmp_14_reg_566_pp0_iter1_reg;
reg   [31:0] tmp_15_reg_571;
reg   [31:0] tmp_15_reg_571_pp0_iter1_reg;
reg   [31:0] tmp_16_reg_576;
reg   [31:0] tmp_16_reg_576_pp0_iter1_reg;
reg   [31:0] tmp_17_reg_581;
reg   [31:0] tmp_17_reg_581_pp0_iter1_reg;
reg   [31:0] tmp_18_reg_586;
reg   [31:0] tmp_18_reg_586_pp0_iter1_reg;
reg   [31:0] tmp_19_reg_591;
reg   [31:0] tmp_19_reg_591_pp0_iter1_reg;
reg   [31:0] tmp_20_reg_596;
reg   [31:0] tmp_20_reg_596_pp0_iter1_reg;
reg   [31:0] tmp_21_reg_601;
reg   [31:0] tmp_21_reg_601_pp0_iter1_reg;
reg   [31:0] tmp_22_reg_606;
reg   [31:0] tmp_22_reg_606_pp0_iter1_reg;
reg   [31:0] tmp_23_reg_611;
reg   [31:0] tmp_23_reg_611_pp0_iter1_reg;
reg   [31:0] tmp_24_reg_616;
reg   [31:0] tmp_24_reg_616_pp0_iter1_reg;
reg   [31:0] tmp_25_reg_621;
reg   [31:0] tmp_25_reg_621_pp0_iter1_reg;
reg   [31:0] tmp_26_reg_626;
reg   [31:0] tmp_26_reg_626_pp0_iter1_reg;
reg   [31:0] tmp_27_reg_631;
reg   [31:0] tmp_27_reg_631_pp0_iter1_reg;
reg   [31:0] tmp_28_reg_636;
reg   [31:0] tmp_28_reg_636_pp0_iter1_reg;
reg   [31:0] tmp_29_reg_641;
reg   [31:0] tmp_29_reg_641_pp0_iter1_reg;
reg   [31:0] tmp_30_reg_646;
reg   [31:0] tmp_30_reg_646_pp0_iter1_reg;
reg   [31:0] tmp_31_reg_651;
reg   [31:0] tmp_31_reg_651_pp0_iter1_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] sum_cast_fu_444_p1;
reg    ap_reg_ioackin_m_axi_input01_V_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_input01_V_WREADY;
wire   [17:0] tmp_4_fu_146_p1;
wire   [25:0] sext_cast_fu_154_p1;
wire   [25:0] tmp_5_cast_fu_150_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_575;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_reg_ioackin_m_axi_input01_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_input01_V_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input01_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_575)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_input01_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_input01_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_input01_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input01_V_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_input01_V_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_input01_V_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_input01_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_reg_511 <= sum_fu_158_p2;
        tmp_10_reg_546 <= {{r_ref_r_read[95:64]}};
        tmp_10_reg_546_pp0_iter1_reg <= tmp_10_reg_546;
        tmp_11_reg_551 <= {{V_m_r_read[95:64]}};
        tmp_11_reg_551_pp0_iter1_reg <= tmp_11_reg_551;
        tmp_12_reg_556 <= {{i_syn_ex_rr_read[127:96]}};
        tmp_12_reg_556_pp0_iter1_reg <= tmp_12_reg_556;
        tmp_13_reg_561 <= {{i_syn_in_rr_read[127:96]}};
        tmp_13_reg_561_pp0_iter1_reg <= tmp_13_reg_561;
        tmp_14_reg_566 <= {{r_ref_r_read[127:96]}};
        tmp_14_reg_566_pp0_iter1_reg <= tmp_14_reg_566;
        tmp_15_reg_571 <= {{V_m_r_read[127:96]}};
        tmp_15_reg_571_pp0_iter1_reg <= tmp_15_reg_571;
        tmp_16_reg_576 <= {{i_syn_ex_rr_read[159:128]}};
        tmp_16_reg_576_pp0_iter1_reg <= tmp_16_reg_576;
        tmp_17_reg_581 <= {{i_syn_in_rr_read[159:128]}};
        tmp_17_reg_581_pp0_iter1_reg <= tmp_17_reg_581;
        tmp_18_reg_586 <= {{r_ref_r_read[159:128]}};
        tmp_18_reg_586_pp0_iter1_reg <= tmp_18_reg_586;
        tmp_19_reg_591 <= {{V_m_r_read[159:128]}};
        tmp_19_reg_591_pp0_iter1_reg <= tmp_19_reg_591;
        tmp_1_reg_496 <= tmp_1_fu_134_p1;
        tmp_1_reg_496_pp0_iter1_reg <= tmp_1_reg_496;
        tmp_20_reg_596 <= {{i_syn_ex_rr_read[191:160]}};
        tmp_20_reg_596_pp0_iter1_reg <= tmp_20_reg_596;
        tmp_21_reg_601 <= {{i_syn_in_rr_read[191:160]}};
        tmp_21_reg_601_pp0_iter1_reg <= tmp_21_reg_601;
        tmp_22_reg_606 <= {{r_ref_r_read[191:160]}};
        tmp_22_reg_606_pp0_iter1_reg <= tmp_22_reg_606;
        tmp_23_reg_611 <= {{V_m_r_read[191:160]}};
        tmp_23_reg_611_pp0_iter1_reg <= tmp_23_reg_611;
        tmp_24_reg_616 <= {{i_syn_ex_rr_read[223:192]}};
        tmp_24_reg_616_pp0_iter1_reg <= tmp_24_reg_616;
        tmp_25_reg_621 <= {{i_syn_in_rr_read[223:192]}};
        tmp_25_reg_621_pp0_iter1_reg <= tmp_25_reg_621;
        tmp_26_reg_626 <= {{r_ref_r_read[223:192]}};
        tmp_26_reg_626_pp0_iter1_reg <= tmp_26_reg_626;
        tmp_27_reg_631 <= {{V_m_r_read[223:192]}};
        tmp_27_reg_631_pp0_iter1_reg <= tmp_27_reg_631;
        tmp_28_reg_636 <= {{i_syn_ex_rr_read[255:224]}};
        tmp_28_reg_636_pp0_iter1_reg <= tmp_28_reg_636;
        tmp_29_reg_641 <= {{i_syn_in_rr_read[255:224]}};
        tmp_29_reg_641_pp0_iter1_reg <= tmp_29_reg_641;
        tmp_2_reg_501 <= tmp_2_fu_138_p1;
        tmp_2_reg_501_pp0_iter1_reg <= tmp_2_reg_501;
        tmp_30_reg_646 <= {{r_ref_r_read[255:224]}};
        tmp_30_reg_646_pp0_iter1_reg <= tmp_30_reg_646;
        tmp_31_reg_651 <= {{V_m_r_read[255:224]}};
        tmp_31_reg_651_pp0_iter1_reg <= tmp_31_reg_651;
        tmp_3_reg_506 <= tmp_3_fu_142_p1;
        tmp_3_reg_506_pp0_iter1_reg <= tmp_3_reg_506;
        tmp_5_reg_541 <= {{i_syn_in_rr_read[95:64]}};
        tmp_5_reg_541_pp0_iter1_reg <= tmp_5_reg_541;
        tmp_6_reg_516 <= {{i_syn_ex_rr_read[63:32]}};
        tmp_6_reg_516_pp0_iter1_reg <= tmp_6_reg_516;
        tmp_7_reg_521 <= {{i_syn_in_rr_read[63:32]}};
        tmp_7_reg_521_pp0_iter1_reg <= tmp_7_reg_521;
        tmp_8_reg_526 <= {{r_ref_r_read[63:32]}};
        tmp_8_reg_526_pp0_iter1_reg <= tmp_8_reg_526;
        tmp_9_reg_531 <= {{V_m_r_read[63:32]}};
        tmp_9_reg_531_pp0_iter1_reg <= tmp_9_reg_531;
        tmp_reg_491 <= tmp_fu_130_p1;
        tmp_reg_491_pp0_iter1_reg <= tmp_reg_491;
        tmp_s_reg_536 <= {{i_syn_ex_rr_read[95:64]}};
        tmp_s_reg_536_pp0_iter1_reg <= tmp_s_reg_536;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_input01_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_input01_V_AWREADY = m_axi_input01_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_input01_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_input01_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_input01_V_WREADY = m_axi_input01_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_input01_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input01_V_blk_n_AW = m_axi_input01_V_AWREADY;
    end else begin
        input01_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        input01_V_blk_n_B = m_axi_input01_V_BVALID;
    end else begin
        input01_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input01_V_blk_n_W = m_axi_input01_V_WREADY;
    end else begin
        input01_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_input01_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        m_axi_input01_V_AWVALID = 1'b1;
    end else begin
        m_axi_input01_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_input01_V_BREADY = 1'b1;
    end else begin
        m_axi_input01_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_input01_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce))) begin
        m_axi_input01_V_WVALID = 1'b1;
    end else begin
        m_axi_input01_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((m_axi_input01_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((m_axi_input01_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_sig_ioackin_m_axi_input01_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_sig_ioackin_m_axi_input01_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)) | ((m_axi_input01_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_sig_ioackin_m_axi_input01_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_sig_ioackin_m_axi_input01_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = (m_axi_input01_V_BVALID == 1'b0);
end

always @ (*) begin
    ap_condition_575 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign m_axi_input01_V_ARADDR = 32'd0;

assign m_axi_input01_V_ARBURST = 2'd0;

assign m_axi_input01_V_ARCACHE = 4'd0;

assign m_axi_input01_V_ARID = 1'd0;

assign m_axi_input01_V_ARLEN = 32'd0;

assign m_axi_input01_V_ARLOCK = 2'd0;

assign m_axi_input01_V_ARPROT = 3'd0;

assign m_axi_input01_V_ARQOS = 4'd0;

assign m_axi_input01_V_ARREGION = 4'd0;

assign m_axi_input01_V_ARSIZE = 3'd0;

assign m_axi_input01_V_ARUSER = 1'd0;

assign m_axi_input01_V_ARVALID = 1'b0;

assign m_axi_input01_V_AWADDR = sum_cast_fu_444_p1;

assign m_axi_input01_V_AWBURST = 2'd0;

assign m_axi_input01_V_AWCACHE = 4'd0;

assign m_axi_input01_V_AWID = 1'd0;

assign m_axi_input01_V_AWLEN = 32'd1;

assign m_axi_input01_V_AWLOCK = 2'd0;

assign m_axi_input01_V_AWPROT = 3'd0;

assign m_axi_input01_V_AWQOS = 4'd0;

assign m_axi_input01_V_AWREGION = 4'd0;

assign m_axi_input01_V_AWSIZE = 3'd0;

assign m_axi_input01_V_AWUSER = 1'd0;

assign m_axi_input01_V_RREADY = 1'b0;

assign m_axi_input01_V_WDATA = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_31_reg_651_pp0_iter1_reg}, {tmp_30_reg_646_pp0_iter1_reg}}, {tmp_29_reg_641_pp0_iter1_reg}}, {tmp_28_reg_636_pp0_iter1_reg}}, {tmp_27_reg_631_pp0_iter1_reg}}, {tmp_26_reg_626_pp0_iter1_reg}}, {tmp_25_reg_621_pp0_iter1_reg}}, {tmp_24_reg_616_pp0_iter1_reg}}, {tmp_23_reg_611_pp0_iter1_reg}}, {tmp_22_reg_606_pp0_iter1_reg}}, {tmp_21_reg_601_pp0_iter1_reg}}, {tmp_20_reg_596_pp0_iter1_reg}}, {tmp_19_reg_591_pp0_iter1_reg}}, {tmp_18_reg_586_pp0_iter1_reg}}, {tmp_17_reg_581_pp0_iter1_reg}}, {tmp_16_reg_576_pp0_iter1_reg}}, {tmp_15_reg_571_pp0_iter1_reg}}, {tmp_14_reg_566_pp0_iter1_reg}}, {tmp_13_reg_561_pp0_iter1_reg}}, {tmp_12_reg_556_pp0_iter1_reg}}, {tmp_11_reg_551_pp0_iter1_reg}}, {tmp_10_reg_546_pp0_iter1_reg}}, {tmp_5_reg_541_pp0_iter1_reg}}, {tmp_s_reg_536_pp0_iter1_reg}}, {tmp_9_reg_531_pp0_iter1_reg}}, {tmp_8_reg_526_pp0_iter1_reg}}, {tmp_7_reg_521_pp0_iter1_reg}}, {tmp_6_reg_516_pp0_iter1_reg}}, {tmp_3_reg_506_pp0_iter1_reg}}, {tmp_2_reg_501_pp0_iter1_reg}}, {tmp_1_reg_496_pp0_iter1_reg}}, {tmp_reg_491_pp0_iter1_reg}};

assign m_axi_input01_V_WID = 1'd0;

assign m_axi_input01_V_WLAST = 1'b0;

assign m_axi_input01_V_WSTRB = 128'd340282366920938463463374607431768211455;

assign m_axi_input01_V_WUSER = 1'd0;

assign sext_cast_fu_154_p1 = input01_V_offset;

assign sum_cast_fu_444_p1 = sum_reg_511;

assign sum_fu_158_p2 = (sext_cast_fu_154_p1 + tmp_5_cast_fu_150_p1);

assign tmp_1_fu_134_p1 = i_syn_in_rr_read[31:0];

assign tmp_2_fu_138_p1 = r_ref_r_read[31:0];

assign tmp_3_fu_142_p1 = V_m_r_read[31:0];

assign tmp_4_fu_146_p1 = num[17:0];

assign tmp_5_cast_fu_150_p1 = tmp_4_fu_146_p1;

assign tmp_fu_130_p1 = i_syn_ex_rr_read[31:0];

endmodule //update_outdata
