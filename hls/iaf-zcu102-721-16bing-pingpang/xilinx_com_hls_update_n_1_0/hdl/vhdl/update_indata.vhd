-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_indata is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input00_V_AWVALID : OUT STD_LOGIC;
    m_axi_input00_V_AWREADY : IN STD_LOGIC;
    m_axi_input00_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input00_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input00_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input00_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input00_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input00_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input00_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input00_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input00_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input00_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_WVALID : OUT STD_LOGIC;
    m_axi_input00_V_WREADY : IN STD_LOGIC;
    m_axi_input00_V_WDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_input00_V_WSTRB : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_input00_V_WLAST : OUT STD_LOGIC;
    m_axi_input00_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_ARVALID : OUT STD_LOGIC;
    m_axi_input00_V_ARREADY : IN STD_LOGIC;
    m_axi_input00_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input00_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input00_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input00_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input00_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input00_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input00_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input00_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input00_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input00_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_RVALID : IN STD_LOGIC;
    m_axi_input00_V_RREADY : OUT STD_LOGIC;
    m_axi_input00_V_RDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_input00_V_RLAST : IN STD_LOGIC;
    m_axi_input00_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input00_V_BVALID : IN STD_LOGIC;
    m_axi_input00_V_BREADY : OUT STD_LOGIC;
    m_axi_input00_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input00_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input00_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_AWVALID : OUT STD_LOGIC;
    m_axi_input01_V_AWREADY : IN STD_LOGIC;
    m_axi_input01_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_WVALID : OUT STD_LOGIC;
    m_axi_input01_V_WREADY : IN STD_LOGIC;
    m_axi_input01_V_WDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_input01_V_WSTRB : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_input01_V_WLAST : OUT STD_LOGIC;
    m_axi_input01_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_ARVALID : OUT STD_LOGIC;
    m_axi_input01_V_ARREADY : IN STD_LOGIC;
    m_axi_input01_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_RVALID : IN STD_LOGIC;
    m_axi_input01_V_RREADY : OUT STD_LOGIC;
    m_axi_input01_V_RDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_input01_V_RLAST : IN STD_LOGIC;
    m_axi_input01_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_BVALID : IN STD_LOGIC;
    m_axi_input01_V_BREADY : OUT STD_LOGIC;
    m_axi_input01_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (29 downto 0);
    input00_V_offset : IN STD_LOGIC_VECTOR (24 downto 0);
    input01_V_offset : IN STD_LOGIC_VECTOR (24 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (255 downto 0);
    input00_V_blk_n_AR : OUT STD_LOGIC;
    input00_V_blk_n_R : OUT STD_LOGIC;
    input01_V_blk_n_AR : OUT STD_LOGIC;
    input01_V_blk_n_R : OUT STD_LOGIC );
end;


architecture behav of update_indata is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_20 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_const_lv12_3F : STD_LOGIC_VECTOR (11 downto 0) := "000000111111";
    constant ap_const_lv12_40 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_const_lv12_5F : STD_LOGIC_VECTOR (11 downto 0) := "000001011111";
    constant ap_const_lv12_60 : STD_LOGIC_VECTOR (11 downto 0) := "000001100000";
    constant ap_const_lv12_7F : STD_LOGIC_VECTOR (11 downto 0) := "000001111111";
    constant ap_const_lv12_80 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_const_lv12_9F : STD_LOGIC_VECTOR (11 downto 0) := "000010011111";
    constant ap_const_lv12_A0 : STD_LOGIC_VECTOR (11 downto 0) := "000010100000";
    constant ap_const_lv12_BF : STD_LOGIC_VECTOR (11 downto 0) := "000010111111";
    constant ap_const_lv12_C0 : STD_LOGIC_VECTOR (11 downto 0) := "000011000000";
    constant ap_const_lv12_DF : STD_LOGIC_VECTOR (11 downto 0) := "000011011111";
    constant ap_const_lv12_E0 : STD_LOGIC_VECTOR (11 downto 0) := "000011100000";
    constant ap_const_lv12_FF : STD_LOGIC_VECTOR (11 downto 0) := "000011111111";
    constant ap_const_lv12_100 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_const_lv12_11F : STD_LOGIC_VECTOR (11 downto 0) := "000100011111";
    constant ap_const_lv12_120 : STD_LOGIC_VECTOR (11 downto 0) := "000100100000";
    constant ap_const_lv12_13F : STD_LOGIC_VECTOR (11 downto 0) := "000100111111";
    constant ap_const_lv12_140 : STD_LOGIC_VECTOR (11 downto 0) := "000101000000";
    constant ap_const_lv12_15F : STD_LOGIC_VECTOR (11 downto 0) := "000101011111";
    constant ap_const_lv12_160 : STD_LOGIC_VECTOR (11 downto 0) := "000101100000";
    constant ap_const_lv12_17F : STD_LOGIC_VECTOR (11 downto 0) := "000101111111";
    constant ap_const_lv12_180 : STD_LOGIC_VECTOR (11 downto 0) := "000110000000";
    constant ap_const_lv12_19F : STD_LOGIC_VECTOR (11 downto 0) := "000110011111";
    constant ap_const_lv12_1A0 : STD_LOGIC_VECTOR (11 downto 0) := "000110100000";
    constant ap_const_lv12_1BF : STD_LOGIC_VECTOR (11 downto 0) := "000110111111";
    constant ap_const_lv12_1C0 : STD_LOGIC_VECTOR (11 downto 0) := "000111000000";
    constant ap_const_lv12_1DF : STD_LOGIC_VECTOR (11 downto 0) := "000111011111";
    constant ap_const_lv12_1E0 : STD_LOGIC_VECTOR (11 downto 0) := "000111100000";
    constant ap_const_lv12_1FF : STD_LOGIC_VECTOR (11 downto 0) := "000111111111";
    constant ap_const_lv12_200 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_const_lv12_21F : STD_LOGIC_VECTOR (11 downto 0) := "001000011111";
    constant ap_const_lv12_220 : STD_LOGIC_VECTOR (11 downto 0) := "001000100000";
    constant ap_const_lv12_23F : STD_LOGIC_VECTOR (11 downto 0) := "001000111111";
    constant ap_const_lv12_240 : STD_LOGIC_VECTOR (11 downto 0) := "001001000000";
    constant ap_const_lv12_25F : STD_LOGIC_VECTOR (11 downto 0) := "001001011111";
    constant ap_const_lv12_260 : STD_LOGIC_VECTOR (11 downto 0) := "001001100000";
    constant ap_const_lv12_27F : STD_LOGIC_VECTOR (11 downto 0) := "001001111111";
    constant ap_const_lv12_280 : STD_LOGIC_VECTOR (11 downto 0) := "001010000000";
    constant ap_const_lv12_29F : STD_LOGIC_VECTOR (11 downto 0) := "001010011111";
    constant ap_const_lv12_2A0 : STD_LOGIC_VECTOR (11 downto 0) := "001010100000";
    constant ap_const_lv12_2BF : STD_LOGIC_VECTOR (11 downto 0) := "001010111111";
    constant ap_const_lv12_2C0 : STD_LOGIC_VECTOR (11 downto 0) := "001011000000";
    constant ap_const_lv12_2DF : STD_LOGIC_VECTOR (11 downto 0) := "001011011111";
    constant ap_const_lv12_2E0 : STD_LOGIC_VECTOR (11 downto 0) := "001011100000";
    constant ap_const_lv12_2FF : STD_LOGIC_VECTOR (11 downto 0) := "001011111111";
    constant ap_const_lv12_300 : STD_LOGIC_VECTOR (11 downto 0) := "001100000000";
    constant ap_const_lv12_31F : STD_LOGIC_VECTOR (11 downto 0) := "001100011111";
    constant ap_const_lv12_320 : STD_LOGIC_VECTOR (11 downto 0) := "001100100000";
    constant ap_const_lv12_33F : STD_LOGIC_VECTOR (11 downto 0) := "001100111111";
    constant ap_const_lv12_340 : STD_LOGIC_VECTOR (11 downto 0) := "001101000000";
    constant ap_const_lv12_35F : STD_LOGIC_VECTOR (11 downto 0) := "001101011111";
    constant ap_const_lv12_360 : STD_LOGIC_VECTOR (11 downto 0) := "001101100000";
    constant ap_const_lv12_37F : STD_LOGIC_VECTOR (11 downto 0) := "001101111111";
    constant ap_const_lv12_380 : STD_LOGIC_VECTOR (11 downto 0) := "001110000000";
    constant ap_const_lv12_39F : STD_LOGIC_VECTOR (11 downto 0) := "001110011111";
    constant ap_const_lv12_3A0 : STD_LOGIC_VECTOR (11 downto 0) := "001110100000";
    constant ap_const_lv12_3BF : STD_LOGIC_VECTOR (11 downto 0) := "001110111111";
    constant ap_const_lv12_3C0 : STD_LOGIC_VECTOR (11 downto 0) := "001111000000";
    constant ap_const_lv12_3DF : STD_LOGIC_VECTOR (11 downto 0) := "001111011111";
    constant ap_const_lv12_3E0 : STD_LOGIC_VECTOR (11 downto 0) := "001111100000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_input00_V_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_axi_input01_V_ARREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sum_fu_222_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_reg_988 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum3_fu_232_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum3_reg_993 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sum_cast_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_input00_V_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_input01_V_ARREADY : STD_LOGIC := '0';
    signal tmp_fu_210_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_cast_fu_218_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_cast_fu_214_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext2_cast_fu_228_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_11_fu_736_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_fu_666_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_596_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_526_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_456_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_386_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_316_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_7_fu_766_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_6_fu_676_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_5_fu_606_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_4_fu_536_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_3_fu_466_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_2_fu_396_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_1_fu_326_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_262_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_7_fu_796_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_6_fu_686_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_5_fu_616_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_4_fu_546_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_3_fu_476_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_2_fu_406_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_1_fu_336_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_272_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_7_fu_826_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_6_fu_696_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_5_fu_626_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_4_fu_556_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_3_fu_486_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_2_fu_416_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_1_fu_346_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_7_fu_856_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_6_fu_706_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_5_fu_636_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_4_fu_566_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_3_fu_496_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_2_fu_426_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_1_fu_356_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_fu_286_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_7_fu_886_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_6_fu_716_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_5_fu_646_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_4_fu_576_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_3_fu_506_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_2_fu_436_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_1_fu_366_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_296_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_7_fu_916_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_6_fu_726_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_5_fu_656_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_4_fu_586_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_3_fu_516_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_2_fu_446_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_1_fu_376_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_fu_306_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal weighted_spikes_ex_s_fu_746_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal weighted_spikes_in_s_fu_776_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal I_e_s_fu_806_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal i_syn_ex_s_fu_836_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal i_syn_in_s_fu_866_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_ref_s_fu_896_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal V_m_s_fu_926_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to7 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_900 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_input00_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_input00_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_900)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_input00_V_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_input00_V_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_input00_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_input01_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_input01_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_900)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_input01_V_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_input01_V_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_input01_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum3_reg_993 <= sum3_fu_232_p2;
                sum_reg_988 <= sum_fu_222_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    I_e_s_fu_806_p9 <= (((((((p_Result_5_7_fu_796_p4 & p_Result_5_6_fu_686_p4) & p_Result_5_5_fu_616_p4) & p_Result_5_4_fu_546_p4) & p_Result_5_3_fu_476_p4) & p_Result_5_2_fu_406_p4) & p_Result_5_1_fu_336_p4) & p_Result_5_fu_272_p4);
    V_m_s_fu_926_p9 <= (((((((p_Result_9_7_fu_916_p4 & p_Result_9_6_fu_726_p4) & p_Result_9_5_fu_656_p4) & p_Result_9_4_fu_586_p4) & p_Result_9_3_fu_516_p4) & p_Result_9_2_fu_446_p4) & p_Result_9_1_fu_376_p4) & p_Result_9_fu_306_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter8, m_axi_input00_V_RVALID, m_axi_input01_V_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((m_axi_input00_V_RVALID = ap_const_logic_0) or (m_axi_input01_V_RVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_input00_V_RVALID, m_axi_input01_V_RVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((m_axi_input00_V_RVALID = ap_const_logic_0) or (m_axi_input01_V_RVALID = ap_const_logic_0))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_input00_V_RVALID, m_axi_input01_V_RVALID, ap_block_state2_io, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((m_axi_input00_V_RVALID = ap_const_logic_0) or (m_axi_input01_V_RVALID = ap_const_logic_0))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_io_assign_proc : process(ap_sig_ioackin_m_axi_input00_V_ARREADY, ap_sig_ioackin_m_axi_input01_V_ARREADY)
    begin
                ap_block_state2_io <= ((ap_sig_ioackin_m_axi_input01_V_ARREADY = ap_const_logic_0) or (ap_sig_ioackin_m_axi_input00_V_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_input00_V_RVALID, m_axi_input01_V_RVALID)
    begin
                ap_block_state9_pp0_stage0_iter8 <= ((m_axi_input00_V_RVALID = ap_const_logic_0) or (m_axi_input01_V_RVALID = ap_const_logic_0));
    end process;


    ap_condition_900_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce)
    begin
                ap_condition_900 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to7)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to7 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= weighted_spikes_ex_s_fu_746_p9;
    ap_return_1 <= weighted_spikes_in_s_fu_776_p9;
    ap_return_2 <= I_e_s_fu_806_p9;
    ap_return_3 <= i_syn_ex_s_fu_836_p9;
    ap_return_4 <= i_syn_in_s_fu_866_p9;
    ap_return_5 <= r_ref_s_fu_896_p9;
    ap_return_6 <= V_m_s_fu_926_p9;

    ap_sig_ioackin_m_axi_input00_V_ARREADY_assign_proc : process(m_axi_input00_V_ARREADY, ap_reg_ioackin_m_axi_input00_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_input00_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_input00_V_ARREADY <= m_axi_input00_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_input00_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_input01_V_ARREADY_assign_proc : process(m_axi_input01_V_ARREADY, ap_reg_ioackin_m_axi_input01_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_input01_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_input01_V_ARREADY <= m_axi_input01_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_input01_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    i_syn_ex_s_fu_836_p9 <= (((((((p_Result_6_7_fu_826_p4 & p_Result_6_6_fu_696_p4) & p_Result_6_5_fu_626_p4) & p_Result_6_4_fu_556_p4) & p_Result_6_3_fu_486_p4) & p_Result_6_2_fu_416_p4) & p_Result_6_1_fu_346_p4) & tmp_69_fu_282_p1);
    i_syn_in_s_fu_866_p9 <= (((((((p_Result_7_7_fu_856_p4 & p_Result_7_6_fu_706_p4) & p_Result_7_5_fu_636_p4) & p_Result_7_4_fu_566_p4) & p_Result_7_3_fu_496_p4) & p_Result_7_2_fu_426_p4) & p_Result_7_1_fu_356_p4) & p_Result_7_fu_286_p4);

    input00_V_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_input00_V_ARREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input00_V_blk_n_AR <= m_axi_input00_V_ARREADY;
        else 
            input00_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input00_V_blk_n_R_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, m_axi_input00_V_RVALID)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            input00_V_blk_n_R <= m_axi_input00_V_RVALID;
        else 
            input00_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    input01_V_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_input01_V_ARREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input01_V_blk_n_AR <= m_axi_input01_V_ARREADY;
        else 
            input01_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input01_V_blk_n_R_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, m_axi_input01_V_RVALID)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            input01_V_blk_n_R <= m_axi_input01_V_RVALID;
        else 
            input01_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_input00_V_ARADDR <= sum_cast_fu_238_p1(32 - 1 downto 0);
    m_axi_input00_V_ARBURST <= ap_const_lv2_0;
    m_axi_input00_V_ARCACHE <= ap_const_lv4_0;
    m_axi_input00_V_ARID <= ap_const_lv1_0;
    m_axi_input00_V_ARLEN <= ap_const_lv32_1;
    m_axi_input00_V_ARLOCK <= ap_const_lv2_0;
    m_axi_input00_V_ARPROT <= ap_const_lv3_0;
    m_axi_input00_V_ARQOS <= ap_const_lv4_0;
    m_axi_input00_V_ARREGION <= ap_const_lv4_0;
    m_axi_input00_V_ARSIZE <= ap_const_lv3_0;
    m_axi_input00_V_ARUSER <= ap_const_lv1_0;

    m_axi_input00_V_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_reg_ioackin_m_axi_input00_V_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_reg_ioackin_m_axi_input00_V_ARREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            m_axi_input00_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input00_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input00_V_AWADDR <= ap_const_lv32_0;
    m_axi_input00_V_AWBURST <= ap_const_lv2_0;
    m_axi_input00_V_AWCACHE <= ap_const_lv4_0;
    m_axi_input00_V_AWID <= ap_const_lv1_0;
    m_axi_input00_V_AWLEN <= ap_const_lv32_0;
    m_axi_input00_V_AWLOCK <= ap_const_lv2_0;
    m_axi_input00_V_AWPROT <= ap_const_lv3_0;
    m_axi_input00_V_AWQOS <= ap_const_lv4_0;
    m_axi_input00_V_AWREGION <= ap_const_lv4_0;
    m_axi_input00_V_AWSIZE <= ap_const_lv3_0;
    m_axi_input00_V_AWUSER <= ap_const_lv1_0;
    m_axi_input00_V_AWVALID <= ap_const_logic_0;
    m_axi_input00_V_BREADY <= ap_const_logic_0;

    m_axi_input00_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_input00_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_input00_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input00_V_WDATA <= ap_const_lv1024_lc_1;
    m_axi_input00_V_WID <= ap_const_lv1_0;
    m_axi_input00_V_WLAST <= ap_const_logic_0;
    m_axi_input00_V_WSTRB <= ap_const_lv128_lc_1;
    m_axi_input00_V_WUSER <= ap_const_lv1_0;
    m_axi_input00_V_WVALID <= ap_const_logic_0;
    m_axi_input01_V_ARADDR <= sum3_cast_fu_248_p1(32 - 1 downto 0);
    m_axi_input01_V_ARBURST <= ap_const_lv2_0;
    m_axi_input01_V_ARCACHE <= ap_const_lv4_0;
    m_axi_input01_V_ARID <= ap_const_lv1_0;
    m_axi_input01_V_ARLEN <= ap_const_lv32_1;
    m_axi_input01_V_ARLOCK <= ap_const_lv2_0;
    m_axi_input01_V_ARPROT <= ap_const_lv3_0;
    m_axi_input01_V_ARQOS <= ap_const_lv4_0;
    m_axi_input01_V_ARREGION <= ap_const_lv4_0;
    m_axi_input01_V_ARSIZE <= ap_const_lv3_0;
    m_axi_input01_V_ARUSER <= ap_const_lv1_0;

    m_axi_input01_V_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_axi_input01_V_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_input01_V_ARREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            m_axi_input01_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input01_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input01_V_AWADDR <= ap_const_lv32_0;
    m_axi_input01_V_AWBURST <= ap_const_lv2_0;
    m_axi_input01_V_AWCACHE <= ap_const_lv4_0;
    m_axi_input01_V_AWID <= ap_const_lv1_0;
    m_axi_input01_V_AWLEN <= ap_const_lv32_0;
    m_axi_input01_V_AWLOCK <= ap_const_lv2_0;
    m_axi_input01_V_AWPROT <= ap_const_lv3_0;
    m_axi_input01_V_AWQOS <= ap_const_lv4_0;
    m_axi_input01_V_AWREGION <= ap_const_lv4_0;
    m_axi_input01_V_AWSIZE <= ap_const_lv3_0;
    m_axi_input01_V_AWUSER <= ap_const_lv1_0;
    m_axi_input01_V_AWVALID <= ap_const_logic_0;
    m_axi_input01_V_BREADY <= ap_const_logic_0;

    m_axi_input01_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_input01_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_input01_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input01_V_WDATA <= ap_const_lv1024_lc_1;
    m_axi_input01_V_WID <= ap_const_lv1_0;
    m_axi_input01_V_WLAST <= ap_const_logic_0;
    m_axi_input01_V_WSTRB <= ap_const_lv128_lc_1;
    m_axi_input01_V_WUSER <= ap_const_lv1_0;
    m_axi_input01_V_WVALID <= ap_const_logic_0;
    p_Result_10_fu_666_p4 <= m_axi_input00_V_RDATA(799 downto 768);
    p_Result_11_fu_736_p4 <= m_axi_input00_V_RDATA(927 downto 896);
    p_Result_1_fu_316_p4 <= m_axi_input00_V_RDATA(159 downto 128);
    p_Result_2_fu_386_p4 <= m_axi_input00_V_RDATA(287 downto 256);
    p_Result_3_fu_456_p4 <= m_axi_input00_V_RDATA(415 downto 384);
    p_Result_4_1_fu_326_p4 <= m_axi_input00_V_RDATA(191 downto 160);
    p_Result_4_2_fu_396_p4 <= m_axi_input00_V_RDATA(319 downto 288);
    p_Result_4_3_fu_466_p4 <= m_axi_input00_V_RDATA(447 downto 416);
    p_Result_4_4_fu_536_p4 <= m_axi_input00_V_RDATA(575 downto 544);
    p_Result_4_5_fu_606_p4 <= m_axi_input00_V_RDATA(703 downto 672);
    p_Result_4_6_fu_676_p4 <= m_axi_input00_V_RDATA(831 downto 800);
    p_Result_4_7_fu_766_p4 <= m_axi_input00_V_RDATA(959 downto 928);
    p_Result_4_fu_262_p4 <= m_axi_input00_V_RDATA(63 downto 32);
    p_Result_5_1_fu_336_p4 <= m_axi_input00_V_RDATA(223 downto 192);
    p_Result_5_2_fu_406_p4 <= m_axi_input00_V_RDATA(351 downto 320);
    p_Result_5_3_fu_476_p4 <= m_axi_input00_V_RDATA(479 downto 448);
    p_Result_5_4_fu_546_p4 <= m_axi_input00_V_RDATA(607 downto 576);
    p_Result_5_5_fu_616_p4 <= m_axi_input00_V_RDATA(735 downto 704);
    p_Result_5_6_fu_686_p4 <= m_axi_input00_V_RDATA(863 downto 832);
    p_Result_5_7_fu_796_p4 <= m_axi_input00_V_RDATA(991 downto 960);
    p_Result_5_fu_272_p4 <= m_axi_input00_V_RDATA(95 downto 64);
    p_Result_6_1_fu_346_p4 <= m_axi_input01_V_RDATA(159 downto 128);
    p_Result_6_2_fu_416_p4 <= m_axi_input01_V_RDATA(287 downto 256);
    p_Result_6_3_fu_486_p4 <= m_axi_input01_V_RDATA(415 downto 384);
    p_Result_6_4_fu_556_p4 <= m_axi_input01_V_RDATA(543 downto 512);
    p_Result_6_5_fu_626_p4 <= m_axi_input01_V_RDATA(671 downto 640);
    p_Result_6_6_fu_696_p4 <= m_axi_input01_V_RDATA(799 downto 768);
    p_Result_6_7_fu_826_p4 <= m_axi_input01_V_RDATA(927 downto 896);
    p_Result_6_fu_596_p4 <= m_axi_input00_V_RDATA(671 downto 640);
    p_Result_7_1_fu_356_p4 <= m_axi_input01_V_RDATA(191 downto 160);
    p_Result_7_2_fu_426_p4 <= m_axi_input01_V_RDATA(319 downto 288);
    p_Result_7_3_fu_496_p4 <= m_axi_input01_V_RDATA(447 downto 416);
    p_Result_7_4_fu_566_p4 <= m_axi_input01_V_RDATA(575 downto 544);
    p_Result_7_5_fu_636_p4 <= m_axi_input01_V_RDATA(703 downto 672);
    p_Result_7_6_fu_706_p4 <= m_axi_input01_V_RDATA(831 downto 800);
    p_Result_7_7_fu_856_p4 <= m_axi_input01_V_RDATA(959 downto 928);
    p_Result_7_fu_286_p4 <= m_axi_input01_V_RDATA(63 downto 32);
    p_Result_8_1_fu_366_p4 <= m_axi_input01_V_RDATA(223 downto 192);
    p_Result_8_2_fu_436_p4 <= m_axi_input01_V_RDATA(351 downto 320);
    p_Result_8_3_fu_506_p4 <= m_axi_input01_V_RDATA(479 downto 448);
    p_Result_8_4_fu_576_p4 <= m_axi_input01_V_RDATA(607 downto 576);
    p_Result_8_5_fu_646_p4 <= m_axi_input01_V_RDATA(735 downto 704);
    p_Result_8_6_fu_716_p4 <= m_axi_input01_V_RDATA(863 downto 832);
    p_Result_8_7_fu_886_p4 <= m_axi_input01_V_RDATA(991 downto 960);
    p_Result_8_fu_296_p4 <= m_axi_input01_V_RDATA(95 downto 64);
    p_Result_9_1_fu_376_p4 <= m_axi_input01_V_RDATA(255 downto 224);
    p_Result_9_2_fu_446_p4 <= m_axi_input01_V_RDATA(383 downto 352);
    p_Result_9_3_fu_516_p4 <= m_axi_input01_V_RDATA(511 downto 480);
    p_Result_9_4_fu_586_p4 <= m_axi_input01_V_RDATA(639 downto 608);
    p_Result_9_5_fu_656_p4 <= m_axi_input01_V_RDATA(767 downto 736);
    p_Result_9_6_fu_726_p4 <= m_axi_input01_V_RDATA(895 downto 864);
    p_Result_9_7_fu_916_p4 <= m_axi_input01_V_RDATA(1023 downto 992);
    p_Result_9_fu_306_p4 <= m_axi_input01_V_RDATA(127 downto 96);
    p_Result_s_fu_526_p4 <= m_axi_input00_V_RDATA(543 downto 512);
    r_ref_s_fu_896_p9 <= (((((((p_Result_8_7_fu_886_p4 & p_Result_8_6_fu_716_p4) & p_Result_8_5_fu_646_p4) & p_Result_8_4_fu_576_p4) & p_Result_8_3_fu_506_p4) & p_Result_8_2_fu_436_p4) & p_Result_8_1_fu_366_p4) & p_Result_8_fu_296_p4);
    sext2_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input01_V_offset),26));
    sext_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input00_V_offset),26));
    sum3_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_reg_993),64));
    sum3_fu_232_p2 <= std_logic_vector(unsigned(sext2_cast_fu_228_p1) + unsigned(tmp_cast_fu_214_p1));
    sum_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_988),64));
    sum_fu_222_p2 <= std_logic_vector(unsigned(sext_cast_fu_218_p1) + unsigned(tmp_cast_fu_214_p1));
    tmp_68_fu_258_p1 <= m_axi_input00_V_RDATA(32 - 1 downto 0);
    tmp_69_fu_282_p1 <= m_axi_input01_V_RDATA(32 - 1 downto 0);
    tmp_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_210_p1),26));
    tmp_fu_210_p1 <= i(18 - 1 downto 0);
    weighted_spikes_ex_s_fu_746_p9 <= (((((((p_Result_11_fu_736_p4 & p_Result_10_fu_666_p4) & p_Result_6_fu_596_p4) & p_Result_s_fu_526_p4) & p_Result_3_fu_456_p4) & p_Result_2_fu_386_p4) & p_Result_1_fu_316_p4) & tmp_68_fu_258_p1);
    weighted_spikes_in_s_fu_776_p9 <= (((((((p_Result_4_7_fu_766_p4 & p_Result_4_6_fu_676_p4) & p_Result_4_5_fu_606_p4) & p_Result_4_4_fu_536_p4) & p_Result_4_3_fu_466_p4) & p_Result_4_2_fu_396_p4) & p_Result_4_1_fu_326_p4) & p_Result_4_fu_262_p4);
end behav;
