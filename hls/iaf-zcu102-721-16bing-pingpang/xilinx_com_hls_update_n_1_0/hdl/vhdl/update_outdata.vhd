-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_outdata is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input01_V_AWVALID : OUT STD_LOGIC;
    m_axi_input01_V_AWREADY : IN STD_LOGIC;
    m_axi_input01_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_WVALID : OUT STD_LOGIC;
    m_axi_input01_V_WREADY : IN STD_LOGIC;
    m_axi_input01_V_WDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_input01_V_WSTRB : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_input01_V_WLAST : OUT STD_LOGIC;
    m_axi_input01_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_ARVALID : OUT STD_LOGIC;
    m_axi_input01_V_ARREADY : IN STD_LOGIC;
    m_axi_input01_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input01_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input01_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input01_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_RVALID : IN STD_LOGIC;
    m_axi_input01_V_RREADY : OUT STD_LOGIC;
    m_axi_input01_V_RDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_input01_V_RLAST : IN STD_LOGIC;
    m_axi_input01_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_BVALID : IN STD_LOGIC;
    m_axi_input01_V_BREADY : OUT STD_LOGIC;
    m_axi_input01_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input01_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input01_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC;
    num : IN STD_LOGIC_VECTOR (29 downto 0);
    V_m_r_read : IN STD_LOGIC_VECTOR (255 downto 0);
    i_syn_ex_rr_read : IN STD_LOGIC_VECTOR (255 downto 0);
    i_syn_in_rr_read : IN STD_LOGIC_VECTOR (255 downto 0);
    r_ref_r_read : IN STD_LOGIC_VECTOR (255 downto 0);
    input01_V_offset : IN STD_LOGIC_VECTOR (24 downto 0);
    input01_V_blk_n_AW : OUT STD_LOGIC;
    input01_V_blk_n_W : OUT STD_LOGIC;
    input01_V_blk_n_B : OUT STD_LOGIC );
end;


architecture behav of update_outdata is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_input01_V_AWREADY : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_input01_V_WREADY : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_491_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_496_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_501_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_158_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_reg_511 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_6_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_516_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_521_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_526_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_531_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_536_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_541_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_546_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_551_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_556_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_561_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_566_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_571_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_576_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_586_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_591_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_596_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_601_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_606_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_611_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_616_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_621_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_626_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_631_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_636_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_641_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_646_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_651_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sum_cast_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_input01_V_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_input01_V_WREADY : STD_LOGIC := '0';
    signal tmp_4_fu_146_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_cast_fu_154_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_5_cast_fu_150_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_575 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_input01_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_input01_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_575)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_input01_V_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_input01_V_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_input01_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_input01_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_input01_V_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_input01_V_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_input01_V_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_input01_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_reg_511 <= sum_fu_158_p2;
                tmp_10_reg_546 <= r_ref_r_read(95 downto 64);
                tmp_10_reg_546_pp0_iter1_reg <= tmp_10_reg_546;
                tmp_11_reg_551 <= V_m_r_read(95 downto 64);
                tmp_11_reg_551_pp0_iter1_reg <= tmp_11_reg_551;
                tmp_12_reg_556 <= i_syn_ex_rr_read(127 downto 96);
                tmp_12_reg_556_pp0_iter1_reg <= tmp_12_reg_556;
                tmp_13_reg_561 <= i_syn_in_rr_read(127 downto 96);
                tmp_13_reg_561_pp0_iter1_reg <= tmp_13_reg_561;
                tmp_14_reg_566 <= r_ref_r_read(127 downto 96);
                tmp_14_reg_566_pp0_iter1_reg <= tmp_14_reg_566;
                tmp_15_reg_571 <= V_m_r_read(127 downto 96);
                tmp_15_reg_571_pp0_iter1_reg <= tmp_15_reg_571;
                tmp_16_reg_576 <= i_syn_ex_rr_read(159 downto 128);
                tmp_16_reg_576_pp0_iter1_reg <= tmp_16_reg_576;
                tmp_17_reg_581 <= i_syn_in_rr_read(159 downto 128);
                tmp_17_reg_581_pp0_iter1_reg <= tmp_17_reg_581;
                tmp_18_reg_586 <= r_ref_r_read(159 downto 128);
                tmp_18_reg_586_pp0_iter1_reg <= tmp_18_reg_586;
                tmp_19_reg_591 <= V_m_r_read(159 downto 128);
                tmp_19_reg_591_pp0_iter1_reg <= tmp_19_reg_591;
                tmp_1_reg_496 <= tmp_1_fu_134_p1;
                tmp_1_reg_496_pp0_iter1_reg <= tmp_1_reg_496;
                tmp_20_reg_596 <= i_syn_ex_rr_read(191 downto 160);
                tmp_20_reg_596_pp0_iter1_reg <= tmp_20_reg_596;
                tmp_21_reg_601 <= i_syn_in_rr_read(191 downto 160);
                tmp_21_reg_601_pp0_iter1_reg <= tmp_21_reg_601;
                tmp_22_reg_606 <= r_ref_r_read(191 downto 160);
                tmp_22_reg_606_pp0_iter1_reg <= tmp_22_reg_606;
                tmp_23_reg_611 <= V_m_r_read(191 downto 160);
                tmp_23_reg_611_pp0_iter1_reg <= tmp_23_reg_611;
                tmp_24_reg_616 <= i_syn_ex_rr_read(223 downto 192);
                tmp_24_reg_616_pp0_iter1_reg <= tmp_24_reg_616;
                tmp_25_reg_621 <= i_syn_in_rr_read(223 downto 192);
                tmp_25_reg_621_pp0_iter1_reg <= tmp_25_reg_621;
                tmp_26_reg_626 <= r_ref_r_read(223 downto 192);
                tmp_26_reg_626_pp0_iter1_reg <= tmp_26_reg_626;
                tmp_27_reg_631 <= V_m_r_read(223 downto 192);
                tmp_27_reg_631_pp0_iter1_reg <= tmp_27_reg_631;
                tmp_28_reg_636 <= i_syn_ex_rr_read(255 downto 224);
                tmp_28_reg_636_pp0_iter1_reg <= tmp_28_reg_636;
                tmp_29_reg_641 <= i_syn_in_rr_read(255 downto 224);
                tmp_29_reg_641_pp0_iter1_reg <= tmp_29_reg_641;
                tmp_2_reg_501 <= tmp_2_fu_138_p1;
                tmp_2_reg_501_pp0_iter1_reg <= tmp_2_reg_501;
                tmp_30_reg_646 <= r_ref_r_read(255 downto 224);
                tmp_30_reg_646_pp0_iter1_reg <= tmp_30_reg_646;
                tmp_31_reg_651 <= V_m_r_read(255 downto 224);
                tmp_31_reg_651_pp0_iter1_reg <= tmp_31_reg_651;
                tmp_3_reg_506 <= tmp_3_fu_142_p1;
                tmp_3_reg_506_pp0_iter1_reg <= tmp_3_reg_506;
                tmp_5_reg_541 <= i_syn_in_rr_read(95 downto 64);
                tmp_5_reg_541_pp0_iter1_reg <= tmp_5_reg_541;
                tmp_6_reg_516 <= i_syn_ex_rr_read(63 downto 32);
                tmp_6_reg_516_pp0_iter1_reg <= tmp_6_reg_516;
                tmp_7_reg_521 <= i_syn_in_rr_read(63 downto 32);
                tmp_7_reg_521_pp0_iter1_reg <= tmp_7_reg_521;
                tmp_8_reg_526 <= r_ref_r_read(63 downto 32);
                tmp_8_reg_526_pp0_iter1_reg <= tmp_8_reg_526;
                tmp_9_reg_531 <= V_m_r_read(63 downto 32);
                tmp_9_reg_531_pp0_iter1_reg <= tmp_9_reg_531;
                tmp_reg_491 <= tmp_fu_130_p1;
                tmp_reg_491_pp0_iter1_reg <= tmp_reg_491;
                tmp_s_reg_536 <= i_syn_ex_rr_read(95 downto 64);
                tmp_s_reg_536_pp0_iter1_reg <= tmp_s_reg_536;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter7, m_axi_input01_V_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((m_axi_input01_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_input01_V_BVALID, ap_sig_ioackin_m_axi_input01_V_AWREADY, ap_sig_ioackin_m_axi_input01_V_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((m_axi_input01_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_sig_ioackin_m_axi_input01_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_sig_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_input01_V_BVALID, ap_sig_ioackin_m_axi_input01_V_AWREADY, ap_sig_ioackin_m_axi_input01_V_WREADY, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((m_axi_input01_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_sig_ioackin_m_axi_input01_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_sig_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(m_axi_input01_V_BVALID)
    begin
                ap_block_state8_pp0_stage0_iter7 <= (m_axi_input01_V_BVALID = ap_const_logic_0);
    end process;


    ap_condition_575_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce)
    begin
                ap_condition_575 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_input01_V_AWREADY_assign_proc : process(m_axi_input01_V_AWREADY, ap_reg_ioackin_m_axi_input01_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_input01_V_AWREADY <= m_axi_input01_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_input01_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_input01_V_WREADY_assign_proc : process(m_axi_input01_V_WREADY, ap_reg_ioackin_m_axi_input01_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_input01_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_input01_V_WREADY <= m_axi_input01_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_input01_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    input01_V_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_input01_V_AWREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input01_V_blk_n_AW <= m_axi_input01_V_AWREADY;
        else 
            input01_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    input01_V_blk_n_B_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, m_axi_input01_V_BVALID)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            input01_V_blk_n_B <= m_axi_input01_V_BVALID;
        else 
            input01_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    input01_V_blk_n_W_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, m_axi_input01_V_WREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input01_V_blk_n_W <= m_axi_input01_V_WREADY;
        else 
            input01_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_input01_V_ARADDR <= ap_const_lv32_0;
    m_axi_input01_V_ARBURST <= ap_const_lv2_0;
    m_axi_input01_V_ARCACHE <= ap_const_lv4_0;
    m_axi_input01_V_ARID <= ap_const_lv1_0;
    m_axi_input01_V_ARLEN <= ap_const_lv32_0;
    m_axi_input01_V_ARLOCK <= ap_const_lv2_0;
    m_axi_input01_V_ARPROT <= ap_const_lv3_0;
    m_axi_input01_V_ARQOS <= ap_const_lv4_0;
    m_axi_input01_V_ARREGION <= ap_const_lv4_0;
    m_axi_input01_V_ARSIZE <= ap_const_lv3_0;
    m_axi_input01_V_ARUSER <= ap_const_lv1_0;
    m_axi_input01_V_ARVALID <= ap_const_logic_0;
    m_axi_input01_V_AWADDR <= sum_cast_fu_444_p1(32 - 1 downto 0);
    m_axi_input01_V_AWBURST <= ap_const_lv2_0;
    m_axi_input01_V_AWCACHE <= ap_const_lv4_0;
    m_axi_input01_V_AWID <= ap_const_lv1_0;
    m_axi_input01_V_AWLEN <= ap_const_lv32_1;
    m_axi_input01_V_AWLOCK <= ap_const_lv2_0;
    m_axi_input01_V_AWPROT <= ap_const_lv3_0;
    m_axi_input01_V_AWQOS <= ap_const_lv4_0;
    m_axi_input01_V_AWREGION <= ap_const_lv4_0;
    m_axi_input01_V_AWSIZE <= ap_const_lv3_0;
    m_axi_input01_V_AWUSER <= ap_const_lv1_0;

    m_axi_input01_V_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_reg_ioackin_m_axi_input01_V_AWREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_axi_input01_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            m_axi_input01_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_input01_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_input01_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_input01_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_input01_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input01_V_RREADY <= ap_const_logic_0;
    m_axi_input01_V_WDATA <= (((((((((((((((((((((((((((((((tmp_31_reg_651_pp0_iter1_reg & tmp_30_reg_646_pp0_iter1_reg) & tmp_29_reg_641_pp0_iter1_reg) & tmp_28_reg_636_pp0_iter1_reg) & tmp_27_reg_631_pp0_iter1_reg) & tmp_26_reg_626_pp0_iter1_reg) & tmp_25_reg_621_pp0_iter1_reg) & tmp_24_reg_616_pp0_iter1_reg) & tmp_23_reg_611_pp0_iter1_reg) & tmp_22_reg_606_pp0_iter1_reg) & tmp_21_reg_601_pp0_iter1_reg) & tmp_20_reg_596_pp0_iter1_reg) & tmp_19_reg_591_pp0_iter1_reg) & tmp_18_reg_586_pp0_iter1_reg) & tmp_17_reg_581_pp0_iter1_reg) & tmp_16_reg_576_pp0_iter1_reg) & tmp_15_reg_571_pp0_iter1_reg) & tmp_14_reg_566_pp0_iter1_reg) & tmp_13_reg_561_pp0_iter1_reg) & tmp_12_reg_556_pp0_iter1_reg) & tmp_11_reg_551_pp0_iter1_reg) & tmp_10_reg_546_pp0_iter1_reg) & tmp_5_reg_541_pp0_iter1_reg) & tmp_s_reg_536_pp0_iter1_reg) & tmp_9_reg_531_pp0_iter1_reg) & tmp_8_reg_526_pp0_iter1_reg) & tmp_7_reg_521_pp0_iter1_reg) & tmp_6_reg_516_pp0_iter1_reg) & tmp_3_reg_506_pp0_iter1_reg) & tmp_2_reg_501_pp0_iter1_reg) & tmp_1_reg_496_pp0_iter1_reg) & tmp_reg_491_pp0_iter1_reg);
    m_axi_input01_V_WID <= ap_const_lv1_0;
    m_axi_input01_V_WLAST <= ap_const_logic_0;
    m_axi_input01_V_WSTRB <= ap_const_lv128_lc_2;
    m_axi_input01_V_WUSER <= ap_const_lv1_0;

    m_axi_input01_V_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_axi_input01_V_WREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_axi_input01_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            m_axi_input01_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_input01_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    sext_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input01_V_offset),26));
    sum_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_511),64));
    sum_fu_158_p2 <= std_logic_vector(unsigned(sext_cast_fu_154_p1) + unsigned(tmp_5_cast_fu_150_p1));
    tmp_1_fu_134_p1 <= i_syn_in_rr_read(32 - 1 downto 0);
    tmp_2_fu_138_p1 <= r_ref_r_read(32 - 1 downto 0);
    tmp_3_fu_142_p1 <= V_m_r_read(32 - 1 downto 0);
    tmp_4_fu_146_p1 <= num(18 - 1 downto 0);
    tmp_5_cast_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_146_p1),26));
    tmp_fu_130_p1 <= i_syn_ex_rr_read(32 - 1 downto 0);
end behav;
